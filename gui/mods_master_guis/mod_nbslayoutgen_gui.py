# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\mod_nbslayoutgen_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_NbSLayoutGen_Gui(object):
    def setupUi(self, NbSLayoutGen_Gui):
        NbSLayoutGen_Gui.setObjectName("NbSLayoutGen_Gui")
        NbSLayoutGen_Gui.resize(881, 603)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/nbs_layout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        NbSLayoutGen_Gui.setWindowIcon(icon)
        self.gridLayout = QtWidgets.QGridLayout(NbSLayoutGen_Gui)
        self.gridLayout.setObjectName("gridLayout")
        self.buttons_widget = QtWidgets.QWidget(NbSLayoutGen_Gui)
        self.buttons_widget.setObjectName("buttons_widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.buttons_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.ok_button = QtWidgets.QPushButton(self.buttons_widget)
        self.ok_button.setMinimumSize(QtCore.QSize(90, 0))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/check.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ok_button.setIcon(icon1)
        self.ok_button.setObjectName("ok_button")
        self.horizontalLayout.addWidget(self.ok_button)
        self.close_button = QtWidgets.QPushButton(self.buttons_widget)
        self.close_button.setMinimumSize(QtCore.QSize(90, 0))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/delete-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close_button.setIcon(icon2)
        self.close_button.setObjectName("close_button")
        self.horizontalLayout.addWidget(self.close_button)
        self.help_button = QtWidgets.QPushButton(self.buttons_widget)
        self.help_button.setMinimumSize(QtCore.QSize(90, 0))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/Help-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.help_button.setIcon(icon3)
        self.help_button.setObjectName("help_button")
        self.horizontalLayout.addWidget(self.help_button)
        self.gridLayout.addWidget(self.buttons_widget, 4, 0, 1, 2)
        self.frame = QtWidgets.QFrame(NbSLayoutGen_Gui)
        self.frame.setMinimumSize(QtCore.QSize(200, 0))
        self.frame.setMaximumSize(QtCore.QSize(200, 16777215))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.description = QtWidgets.QTextBrowser(self.frame)
        self.description.setMinimumSize(QtCore.QSize(200, 0))
        self.description.setMaximumSize(QtCore.QSize(200, 16777215))
        self.description.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.description.setFrameShadow(QtWidgets.QFrame.Plain)
        self.description.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.description.setObjectName("description")
        self.verticalLayout_6.addWidget(self.description)
        self.img = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.img.sizePolicy().hasHeightForWidth())
        self.img.setSizePolicy(sizePolicy)
        self.img.setMinimumSize(QtCore.QSize(200, 120))
        self.img.setMaximumSize(QtCore.QSize(200, 120))
        self.img.setText("")
        self.img.setPixmap(QtGui.QPixmap(":/mod_imgs/module_imgs/mod_nbsplanning.jpg"))
        self.img.setObjectName("img")
        self.verticalLayout_6.addWidget(self.img)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(NbSLayoutGen_Gui)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 1, 0, 1, 2)
        self.widget = QtWidgets.QWidget(NbSLayoutGen_Gui)
        self.widget.setMinimumSize(QtCore.QSize(0, 0))
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.progressbar = QtWidgets.QProgressBar(self.widget)
        self.progressbar.setMinimumSize(QtCore.QSize(0, 16))
        self.progressbar.setMaximumSize(QtCore.QSize(16777215, 16))
        self.progressbar.setProperty("value", 0)
        self.progressbar.setTextVisible(False)
        self.progressbar.setOrientation(QtCore.Qt.Horizontal)
        self.progressbar.setInvertedAppearance(False)
        self.progressbar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressbar.setObjectName("progressbar")
        self.horizontalLayout_2.addWidget(self.progressbar)
        self.run_button = QtWidgets.QPushButton(self.widget)
        self.run_button.setMinimumSize(QtCore.QSize(90, 0))
        self.run_button.setMaximumSize(QtCore.QSize(90, 16777215))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/Play-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.run_button.setIcon(icon4)
        self.run_button.setObjectName("run_button")
        self.horizontalLayout_2.addWidget(self.run_button)
        self.gridLayout.addWidget(self.widget, 2, 0, 1, 2)
        self.parameters = QtWidgets.QWidget(NbSLayoutGen_Gui)
        self.parameters.setObjectName("parameters")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.parameters)
        self.verticalLayout.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title = QtWidgets.QLabel(self.parameters)
        self.title.setObjectName("title")
        self.verticalLayout.addWidget(self.title)
        self.asset_col_title = QtWidgets.QLabel(self.parameters)
        self.asset_col_title.setObjectName("asset_col_title")
        self.verticalLayout.addWidget(self.asset_col_title)
        self.gridname_widget = QtWidgets.QWidget(self.parameters)
        self.gridname_widget.setObjectName("gridname_widget")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.gridname_widget)
        self.gridLayout_7.setContentsMargins(6, 6, 6, 6)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.assetcol_combo = QtWidgets.QComboBox(self.gridname_widget)
        self.assetcol_combo.setMinimumSize(QtCore.QSize(300, 0))
        self.assetcol_combo.setObjectName("assetcol_combo")
        self.assetcol_combo.addItem("")
        self.gridLayout_7.addWidget(self.assetcol_combo, 0, 1, 1, 1)
        self.gridname_lbl = QtWidgets.QLabel(self.gridname_widget)
        self.gridname_lbl.setMinimumSize(QtCore.QSize(100, 0))
        self.gridname_lbl.setMaximumSize(QtCore.QSize(100, 16777215))
        self.gridname_lbl.setObjectName("gridname_lbl")
        self.gridLayout_7.addWidget(self.gridname_lbl, 0, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_7.addItem(spacerItem1, 0, 2, 1, 1)
        self.verticalLayout.addWidget(self.gridname_widget)
        self.asset_col_title_2 = QtWidgets.QLabel(self.parameters)
        self.asset_col_title_2.setObjectName("asset_col_title_2")
        self.verticalLayout.addWidget(self.asset_col_title_2)
        self.gridname_lbl_2 = QtWidgets.QLabel(self.parameters)
        self.gridname_lbl_2.setMinimumSize(QtCore.QSize(0, 0))
        self.gridname_lbl_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.gridname_lbl_2.setWordWrap(True)
        self.gridname_lbl_2.setObjectName("gridname_lbl_2")
        self.verticalLayout.addWidget(self.gridname_lbl_2)
        self.service = QtWidgets.QTabWidget(self.parameters)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.service.sizePolicy().hasHeightForWidth())
        self.service.setSizePolicy(sizePolicy)
        self.service.setObjectName("service")
        self.service1 = QtWidgets.QWidget()
        self.service1.setObjectName("service1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.service1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.service_scrollarea = QtWidgets.QScrollArea(self.service1)
        self.service_scrollarea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.service_scrollarea.setWidgetResizable(True)
        self.service_scrollarea.setObjectName("service_scrollarea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 608, 571))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.service_title = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.service_title.setMinimumSize(QtCore.QSize(0, 16))
        self.service_title.setMaximumSize(QtCore.QSize(16777215, 16))
        self.service_title.setObjectName("service_title")
        self.verticalLayout_3.addWidget(self.service_title)
        self.service_line = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.service_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.service_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.service_line.setObjectName("service_line")
        self.verticalLayout_3.addWidget(self.service_line)
        self.service_lbl = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.service_lbl.setObjectName("service_lbl")
        self.verticalLayout_3.addWidget(self.service_lbl)
        self.service_runoff_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.service_runoff_widget.setObjectName("service_runoff_widget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.service_runoff_widget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.runoff_img = QtWidgets.QLabel(self.service_runoff_widget)
        self.runoff_img.setMinimumSize(QtCore.QSize(20, 20))
        self.runoff_img.setMaximumSize(QtCore.QSize(20, 20))
        self.runoff_img.setText("")
        self.runoff_img.setPixmap(QtGui.QPixmap(":/icons/construction.png"))
        self.runoff_img.setScaledContents(True)
        self.runoff_img.setObjectName("runoff_img")
        self.horizontalLayout_3.addWidget(self.runoff_img)
        self.runoff_lbl = QtWidgets.QLabel(self.service_runoff_widget)
        self.runoff_lbl.setMinimumSize(QtCore.QSize(0, 16))
        self.runoff_lbl.setMaximumSize(QtCore.QSize(16777215, 16))
        self.runoff_lbl.setObjectName("runoff_lbl")
        self.horizontalLayout_3.addWidget(self.runoff_lbl)
        self.service_runoff_spin = QtWidgets.QDoubleSpinBox(self.service_runoff_widget)
        self.service_runoff_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.service_runoff_spin.setDecimals(1)
        self.service_runoff_spin.setObjectName("service_runoff_spin")
        self.horizontalLayout_3.addWidget(self.service_runoff_spin)
        self.runoff_lbl2 = QtWidgets.QLabel(self.service_runoff_widget)
        self.runoff_lbl2.setObjectName("runoff_lbl2")
        self.horizontalLayout_3.addWidget(self.runoff_lbl2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.verticalLayout_3.addWidget(self.service_runoff_widget)
        self.widget_4 = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pollute_img = QtWidgets.QLabel(self.widget_4)
        self.pollute_img.setMinimumSize(QtCore.QSize(20, 20))
        self.pollute_img.setMaximumSize(QtCore.QSize(20, 20))
        self.pollute_img.setText("")
        self.pollute_img.setPixmap(QtGui.QPixmap(":/icons/water-pollution.png"))
        self.pollute_img.setScaledContents(True)
        self.pollute_img.setObjectName("pollute_img")
        self.horizontalLayout_4.addWidget(self.pollute_img)
        self.pollute_lbl = QtWidgets.QLabel(self.widget_4)
        self.pollute_lbl.setMinimumSize(QtCore.QSize(0, 16))
        self.pollute_lbl.setMaximumSize(QtCore.QSize(16777215, 16))
        self.pollute_lbl.setObjectName("pollute_lbl")
        self.horizontalLayout_4.addWidget(self.pollute_lbl)
        self.service_pollute_spin = QtWidgets.QDoubleSpinBox(self.widget_4)
        self.service_pollute_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.service_pollute_spin.setDecimals(1)
        self.service_pollute_spin.setObjectName("service_pollute_spin")
        self.horizontalLayout_4.addWidget(self.service_pollute_spin)
        self.pollute_lbl2 = QtWidgets.QLabel(self.widget_4)
        self.pollute_lbl2.setObjectName("pollute_lbl2")
        self.horizontalLayout_4.addWidget(self.pollute_lbl2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.verticalLayout_3.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.recycle_img = QtWidgets.QLabel(self.widget_5)
        self.recycle_img.setMinimumSize(QtCore.QSize(20, 20))
        self.recycle_img.setMaximumSize(QtCore.QSize(20, 20))
        self.recycle_img.setText("")
        self.recycle_img.setPixmap(QtGui.QPixmap(":/icons/drinking.png"))
        self.recycle_img.setScaledContents(True)
        self.recycle_img.setObjectName("recycle_img")
        self.horizontalLayout_5.addWidget(self.recycle_img)
        self.recycle_lbl = QtWidgets.QLabel(self.widget_5)
        self.recycle_lbl.setMinimumSize(QtCore.QSize(0, 16))
        self.recycle_lbl.setMaximumSize(QtCore.QSize(16777215, 16))
        self.recycle_lbl.setObjectName("recycle_lbl")
        self.horizontalLayout_5.addWidget(self.recycle_lbl)
        self.service_recycle_spin = QtWidgets.QDoubleSpinBox(self.widget_5)
        self.service_recycle_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.service_recycle_spin.setDecimals(1)
        self.service_recycle_spin.setObjectName("service_recycle_spin")
        self.horizontalLayout_5.addWidget(self.service_recycle_spin)
        self.recycle_lbl2 = QtWidgets.QLabel(self.widget_5)
        self.recycle_lbl2.setObjectName("recycle_lbl2")
        self.horizontalLayout_5.addWidget(self.recycle_lbl2)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        self.verticalLayout_3.addWidget(self.widget_5)
        self.service_luc_lbl = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.service_luc_lbl.setObjectName("service_luc_lbl")
        self.verticalLayout_3.addWidget(self.service_luc_lbl)
        self.service_luc_check = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.service_luc_check.setObjectName("service_luc_check")
        self.verticalLayout_3.addWidget(self.service_luc_check)
        self.luc_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.luc_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.luc_widget.setObjectName("luc_widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.luc_widget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.service_res = QtWidgets.QCheckBox(self.luc_widget)
        self.service_res.setObjectName("service_res")
        self.gridLayout_2.addWidget(self.service_res, 0, 1, 1, 1)
        self.service_hi = QtWidgets.QCheckBox(self.luc_widget)
        self.service_hi.setObjectName("service_hi")
        self.gridLayout_2.addWidget(self.service_hi, 1, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 0, 0, 1, 1)
        self.service_li = QtWidgets.QCheckBox(self.luc_widget)
        self.service_li.setObjectName("service_li")
        self.gridLayout_2.addWidget(self.service_li, 0, 2, 1, 1)
        self.service_hdr = QtWidgets.QCheckBox(self.luc_widget)
        self.service_hdr.setObjectName("service_hdr")
        self.gridLayout_2.addWidget(self.service_hdr, 1, 1, 1, 1)
        self.service_com = QtWidgets.QCheckBox(self.luc_widget)
        self.service_com.setObjectName("service_com")
        self.gridLayout_2.addWidget(self.service_com, 2, 1, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem6, 0, 3, 1, 1)
        self.verticalLayout_3.addWidget(self.luc_widget)
        self.redundancy_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.redundancy_widget.setObjectName("redundancy_widget")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.redundancy_widget)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.service_redundancy_lbl = QtWidgets.QLabel(self.redundancy_widget)
        self.service_redundancy_lbl.setObjectName("service_redundancy_lbl")
        self.horizontalLayout_6.addWidget(self.service_redundancy_lbl)
        self.service_redundancy = QtWidgets.QDoubleSpinBox(self.redundancy_widget)
        self.service_redundancy.setMinimumSize(QtCore.QSize(60, 0))
        self.service_redundancy.setDecimals(0)
        self.service_redundancy.setMaximum(100.0)
        self.service_redundancy.setSingleStep(5.0)
        self.service_redundancy.setObjectName("service_redundancy")
        self.horizontalLayout_6.addWidget(self.service_redundancy)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem7)
        self.verticalLayout_3.addWidget(self.redundancy_widget)
        self.montecarlo_settings_title = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.montecarlo_settings_title.setMinimumSize(QtCore.QSize(0, 16))
        self.montecarlo_settings_title.setMaximumSize(QtCore.QSize(16777215, 16))
        self.montecarlo_settings_title.setObjectName("montecarlo_settings_title")
        self.verticalLayout_3.addWidget(self.montecarlo_settings_title)
        self.montecarlo_line = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.montecarlo_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.montecarlo_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.montecarlo_line.setObjectName("montecarlo_line")
        self.verticalLayout_3.addWidget(self.montecarlo_line)
        self.montecarlo_lbl = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.montecarlo_lbl.setObjectName("montecarlo_lbl")
        self.verticalLayout_3.addWidget(self.montecarlo_lbl)
        self.montecarlo_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.montecarlo_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.montecarlo_widget.setObjectName("montecarlo_widget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.montecarlo_widget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        spacerItem8 = QtWidgets.QSpacerItem(177, 17, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem8, 1, 5, 1, 1)
        self.montecarlo_maxiter_spin = QtWidgets.QSpinBox(self.montecarlo_widget)
        self.montecarlo_maxiter_spin.setMinimum(100)
        self.montecarlo_maxiter_spin.setMaximum(100000)
        self.montecarlo_maxiter_spin.setProperty("value", 1000)
        self.montecarlo_maxiter_spin.setObjectName("montecarlo_maxiter_spin")
        self.gridLayout_3.addWidget(self.montecarlo_maxiter_spin, 1, 3, 1, 1)
        self.montecarlo_select_spin = QtWidgets.QSpinBox(self.montecarlo_widget)
        self.montecarlo_select_spin.setMinimum(1)
        self.montecarlo_select_spin.setMaximum(100)
        self.montecarlo_select_spin.setProperty("value", 10)
        self.montecarlo_select_spin.setObjectName("montecarlo_select_spin")
        self.gridLayout_3.addWidget(self.montecarlo_select_spin, 2, 3, 1, 1)
        self.montecarlo_select_lbl2 = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_select_lbl2.setObjectName("montecarlo_select_lbl2")
        self.gridLayout_3.addWidget(self.montecarlo_select_lbl2, 2, 4, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem9, 1, 0, 1, 1)
        self.montecarlo_collect_lbl = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_collect_lbl.setObjectName("montecarlo_collect_lbl")
        self.gridLayout_3.addWidget(self.montecarlo_collect_lbl, 4, 1, 1, 2)
        self.montecarlo_ci_radio = QtWidgets.QRadioButton(self.montecarlo_widget)
        self.montecarlo_ci_radio.setObjectName("montecarlo_ci_radio")
        self.gridLayout_3.addWidget(self.montecarlo_ci_radio, 4, 4, 1, 1)
        self.montecarlo_select_lbl = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_select_lbl.setObjectName("montecarlo_select_lbl")
        self.gridLayout_3.addWidget(self.montecarlo_select_lbl, 2, 1, 1, 2)
        spacerItem10 = QtWidgets.QSpacerItem(306, 17, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem10, 2, 5, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(306, 17, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem11, 3, 5, 1, 1)
        self.montecarlo_maxiter_lbl2 = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_maxiter_lbl2.setObjectName("montecarlo_maxiter_lbl2")
        self.gridLayout_3.addWidget(self.montecarlo_maxiter_lbl2, 1, 4, 1, 1)
        self.montecarlo_score_lbl = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_score_lbl.setObjectName("montecarlo_score_lbl")
        self.gridLayout_3.addWidget(self.montecarlo_score_lbl, 3, 1, 1, 2)
        self.montecarlo_ranks_radio = QtWidgets.QRadioButton(self.montecarlo_widget)
        self.montecarlo_ranks_radio.setObjectName("montecarlo_ranks_radio")
        self.gridLayout_3.addWidget(self.montecarlo_ranks_radio, 4, 3, 1, 1)
        self.montecarlo_score_combo = QtWidgets.QComboBox(self.montecarlo_widget)
        self.montecarlo_score_combo.setObjectName("montecarlo_score_combo")
        self.montecarlo_score_combo.addItem("")
        self.montecarlo_score_combo.addItem("")
        self.gridLayout_3.addWidget(self.montecarlo_score_combo, 3, 3, 1, 2)
        self.montecarlo_maxiter_lbl = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_maxiter_lbl.setObjectName("montecarlo_maxiter_lbl")
        self.gridLayout_3.addWidget(self.montecarlo_maxiter_lbl, 1, 1, 1, 2)
        self.montecarlo_method_lbl = QtWidgets.QLabel(self.montecarlo_widget)
        self.montecarlo_method_lbl.setObjectName("montecarlo_method_lbl")
        self.gridLayout_3.addWidget(self.montecarlo_method_lbl, 0, 1, 1, 2)
        self.montecarlo_method_combo = QtWidgets.QComboBox(self.montecarlo_widget)
        self.montecarlo_method_combo.setObjectName("montecarlo_method_combo")
        self.montecarlo_method_combo.addItem("")
        self.montecarlo_method_combo.addItem("")
        self.gridLayout_3.addWidget(self.montecarlo_method_combo, 0, 3, 1, 2)
        spacerItem12 = QtWidgets.QSpacerItem(177, 17, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem12, 0, 5, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem13, 0, 0, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem14, 2, 0, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem15, 3, 0, 1, 1)
        spacerItem16 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem16, 4, 0, 1, 1)
        spacerItem17 = QtWidgets.QSpacerItem(306, 17, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem17, 4, 5, 1, 1)
        self.verticalLayout_3.addWidget(self.montecarlo_widget)
        spacerItem18 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem18)
        self.service_scrollarea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.service_scrollarea)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/kisspng-computer-icons-royalty-free-service-icon-5b23ddccb7d7c8.767495101529077196753.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.service.addTab(self.service1, icon5, "")
        self.evaluation = QtWidgets.QWidget()
        self.evaluation.setObjectName("evaluation")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.evaluation)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.evaluation_scrollarea = QtWidgets.QScrollArea(self.evaluation)
        self.evaluation_scrollarea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.evaluation_scrollarea.setWidgetResizable(True)
        self.evaluation_scrollarea.setObjectName("evaluation_scrollarea")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 608, 575))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pref_title = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.pref_title.setMinimumSize(QtCore.QSize(0, 16))
        self.pref_title.setMaximumSize(QtCore.QSize(16777215, 16))
        self.pref_title.setObjectName("pref_title")
        self.verticalLayout_4.addWidget(self.pref_title)
        self.pref_line = QtWidgets.QFrame(self.scrollAreaWidgetContents_2)
        self.pref_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.pref_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.pref_line.setObjectName("pref_line")
        self.verticalLayout_4.addWidget(self.pref_line)
        self.scalepref_title = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.scalepref_title.setWordWrap(True)
        self.scalepref_title.setObjectName("scalepref_title")
        self.verticalLayout_4.addWidget(self.scalepref_title)
        self.scalepref_descr = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.scalepref_descr.setWordWrap(True)
        self.scalepref_descr.setObjectName("scalepref_descr")
        self.verticalLayout_4.addWidget(self.scalepref_descr)
        self.scalepref_check = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_2)
        self.scalepref_check.setObjectName("scalepref_check")
        self.verticalLayout_4.addWidget(self.scalepref_check)
        self.scalepref_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents_2)
        self.scalepref_widget.setObjectName("scalepref_widget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.scalepref_widget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.scalepref_small_lbl = QtWidgets.QLabel(self.scalepref_widget)
        self.scalepref_small_lbl.setObjectName("scalepref_small_lbl")
        self.gridLayout_6.addWidget(self.scalepref_small_lbl, 0, 0, 1, 1)
        self.scalepref_large_lbl = QtWidgets.QLabel(self.scalepref_widget)
        self.scalepref_large_lbl.setObjectName("scalepref_large_lbl")
        self.gridLayout_6.addWidget(self.scalepref_large_lbl, 0, 2, 1, 1)
        self.scalepref_slider = QtWidgets.QSlider(self.scalepref_widget)
        self.scalepref_slider.setMinimum(1)
        self.scalepref_slider.setMaximum(3)
        self.scalepref_slider.setSingleStep(1)
        self.scalepref_slider.setPageStep(2)
        self.scalepref_slider.setProperty("value", 2)
        self.scalepref_slider.setOrientation(QtCore.Qt.Horizontal)
        self.scalepref_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.scalepref_slider.setTickInterval(5)
        self.scalepref_slider.setObjectName("scalepref_slider")
        self.gridLayout_6.addWidget(self.scalepref_slider, 0, 1, 1, 1)
        spacerItem19 = QtWidgets.QSpacerItem(50, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_6.addItem(spacerItem19, 0, 3, 1, 1)
        self.scalepref_mix_lbl = QtWidgets.QLabel(self.scalepref_widget)
        self.scalepref_mix_lbl.setObjectName("scalepref_mix_lbl")
        self.gridLayout_6.addWidget(self.scalepref_mix_lbl, 1, 1, 1, 1)
        self.verticalLayout_4.addWidget(self.scalepref_widget)
        self.techpref_title = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.techpref_title.setObjectName("techpref_title")
        self.verticalLayout_4.addWidget(self.techpref_title)
        self.techpref_descr = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.techpref_descr.setWordWrap(True)
        self.techpref_descr.setObjectName("techpref_descr")
        self.verticalLayout_4.addWidget(self.techpref_descr)
        self.techpref_check = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_2)
        self.techpref_check.setObjectName("techpref_check")
        self.verticalLayout_4.addWidget(self.techpref_check)
        self.techpref_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents_2)
        self.techpref_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.techpref_widget.setObjectName("techpref_widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.techpref_widget)
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem20 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem20, 1, 0, 1, 1)
        spacerItem21 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem21, 1, 4, 1, 1)
        self.techpref_ubeatsdefault_check = QtWidgets.QCheckBox(self.techpref_widget)
        self.techpref_ubeatsdefault_check.setObjectName("techpref_ubeatsdefault_check")
        self.gridLayout_4.addWidget(self.techpref_ubeatsdefault_check, 2, 2, 1, 1)
        self.techpref_matrixbrowse = QtWidgets.QToolButton(self.techpref_widget)
        self.techpref_matrixbrowse.setEnabled(True)
        self.techpref_matrixbrowse.setObjectName("techpref_matrixbrowse")
        self.gridLayout_4.addWidget(self.techpref_matrixbrowse, 1, 3, 1, 1)
        self.techpref_lbl2 = QtWidgets.QLabel(self.techpref_widget)
        self.techpref_lbl2.setObjectName("techpref_lbl2")
        self.gridLayout_4.addWidget(self.techpref_lbl2, 2, 1, 1, 1)
        self.techpref_matrix_lbl = QtWidgets.QLabel(self.techpref_widget)
        self.techpref_matrix_lbl.setObjectName("techpref_matrix_lbl")
        self.gridLayout_4.addWidget(self.techpref_matrix_lbl, 1, 1, 1, 1)
        self.techpref_matrix_box = QtWidgets.QLineEdit(self.techpref_widget)
        self.techpref_matrix_box.setObjectName("techpref_matrix_box")
        self.gridLayout_4.addWidget(self.techpref_matrix_box, 1, 2, 1, 1)
        self.verticalLayout_4.addWidget(self.techpref_widget)
        self.techpref_weights_lbl = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.techpref_weights_lbl.setObjectName("techpref_weights_lbl")
        self.verticalLayout_4.addWidget(self.techpref_weights_lbl)
        self.techpref_weights_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents_2)
        self.techpref_weights_widget.setObjectName("techpref_weights_widget")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.techpref_weights_widget)
        self.gridLayout_8.setObjectName("gridLayout_8")
        spacerItem22 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem22, 0, 0, 1, 1)
        self.techpref_econ_spin = QtWidgets.QSpinBox(self.techpref_weights_widget)
        self.techpref_econ_spin.setMaximumSize(QtCore.QSize(50, 16777215))
        self.techpref_econ_spin.setMaximum(100)
        self.techpref_econ_spin.setObjectName("techpref_econ_spin")
        self.gridLayout_8.addWidget(self.techpref_econ_spin, 1, 7, 1, 1)
        spacerItem23 = QtWidgets.QSpacerItem(20, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem23, 0, 4, 1, 1)
        self.techpref_env_spin = QtWidgets.QSpinBox(self.techpref_weights_widget)
        self.techpref_env_spin.setMaximumSize(QtCore.QSize(50, 16777215))
        self.techpref_env_spin.setMaximum(100)
        self.techpref_env_spin.setObjectName("techpref_env_spin")
        self.gridLayout_8.addWidget(self.techpref_env_spin, 1, 5, 1, 1)
        self.techpref_tech_check = QtWidgets.QCheckBox(self.techpref_weights_widget)
        self.techpref_tech_check.setObjectName("techpref_tech_check")
        self.gridLayout_8.addWidget(self.techpref_tech_check, 0, 3, 1, 1)
        self.techpref_soc_check = QtWidgets.QCheckBox(self.techpref_weights_widget)
        self.techpref_soc_check.setObjectName("techpref_soc_check")
        self.gridLayout_8.addWidget(self.techpref_soc_check, 0, 9, 1, 1)
        spacerItem24 = QtWidgets.QSpacerItem(20, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem24, 0, 6, 1, 1)
        spacerItem25 = QtWidgets.QSpacerItem(20, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem25, 0, 8, 1, 1)
        self.techpref_weights_lbl2 = QtWidgets.QLabel(self.techpref_weights_widget)
        self.techpref_weights_lbl2.setObjectName("techpref_weights_lbl2")
        self.gridLayout_8.addWidget(self.techpref_weights_lbl2, 0, 1, 1, 1)
        self.techpref_tech_spin = QtWidgets.QSpinBox(self.techpref_weights_widget)
        self.techpref_tech_spin.setMaximumSize(QtCore.QSize(50, 16777215))
        self.techpref_tech_spin.setMaximum(100)
        self.techpref_tech_spin.setObjectName("techpref_tech_spin")
        self.gridLayout_8.addWidget(self.techpref_tech_spin, 1, 3, 1, 1)
        self.techpref_soc_spin = QtWidgets.QSpinBox(self.techpref_weights_widget)
        self.techpref_soc_spin.setMaximumSize(QtCore.QSize(50, 16777215))
        self.techpref_soc_spin.setMaximum(100)
        self.techpref_soc_spin.setObjectName("techpref_soc_spin")
        self.gridLayout_8.addWidget(self.techpref_soc_spin, 1, 9, 1, 1)
        self.techpref_env_check = QtWidgets.QCheckBox(self.techpref_weights_widget)
        self.techpref_env_check.setObjectName("techpref_env_check")
        self.gridLayout_8.addWidget(self.techpref_env_check, 0, 5, 1, 1)
        self.techpref_econ_check = QtWidgets.QCheckBox(self.techpref_weights_widget)
        self.techpref_econ_check.setObjectName("techpref_econ_check")
        self.gridLayout_8.addWidget(self.techpref_econ_check, 0, 7, 1, 1)
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem26, 0, 10, 1, 1)
        self.techpref_weights_lbl3 = QtWidgets.QLabel(self.techpref_weights_widget)
        self.techpref_weights_lbl3.setObjectName("techpref_weights_lbl3")
        self.gridLayout_8.addWidget(self.techpref_weights_lbl3, 1, 1, 1, 1)
        spacerItem27 = QtWidgets.QSpacerItem(20, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem27, 0, 2, 1, 1)
        self.verticalLayout_4.addWidget(self.techpref_weights_widget)
        self.scoring_title = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.scoring_title.setMinimumSize(QtCore.QSize(0, 16))
        self.scoring_title.setMaximumSize(QtCore.QSize(16777215, 16))
        self.scoring_title.setObjectName("scoring_title")
        self.verticalLayout_4.addWidget(self.scoring_title)
        self.scoring_line = QtWidgets.QFrame(self.scrollAreaWidgetContents_2)
        self.scoring_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.scoring_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.scoring_line.setObjectName("scoring_line")
        self.verticalLayout_4.addWidget(self.scoring_line)
        self.scoring_descr = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.scoring_descr.setObjectName("scoring_descr")
        self.verticalLayout_4.addWidget(self.scoring_descr)
        self.scoring_widget = QtWidgets.QWidget(self.scrollAreaWidgetContents_2)
        self.scoring_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.scoring_widget.setObjectName("scoring_widget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.scoring_widget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        spacerItem28 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem28, 0, 4, 1, 1)
        spacerItem29 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem29, 3, 0, 1, 1)
        self.scoring_strat_combo = QtWidgets.QComboBox(self.scoring_widget)
        self.scoring_strat_combo.setObjectName("scoring_strat_combo")
        self.scoring_strat_combo.addItem("")
        self.scoring_strat_combo.addItem("")
        self.scoring_strat_combo.addItem("")
        self.gridLayout_5.addWidget(self.scoring_strat_combo, 0, 3, 1, 1)
        self.scoring_method_combo = QtWidgets.QComboBox(self.scoring_widget)
        self.scoring_method_combo.setObjectName("scoring_method_combo")
        self.scoring_method_combo.addItem("")
        self.scoring_method_combo.addItem("")
        self.gridLayout_5.addWidget(self.scoring_method_combo, 1, 3, 1, 1)
        spacerItem30 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem30, 0, 0, 1, 1)
        spacerItem31 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem31, 1, 0, 1, 1)
        self.scoring_strat_lbl = QtWidgets.QLabel(self.scoring_widget)
        self.scoring_strat_lbl.setObjectName("scoring_strat_lbl")
        self.gridLayout_5.addWidget(self.scoring_strat_lbl, 0, 1, 1, 2)
        self.scoring_multifunction_spin = QtWidgets.QSpinBox(self.scoring_widget)
        self.scoring_multifunction_spin.setMaximumSize(QtCore.QSize(100, 16777215))
        self.scoring_multifunction_spin.setMinimum(0)
        self.scoring_multifunction_spin.setMaximum(100)
        self.scoring_multifunction_spin.setSingleStep(1)
        self.scoring_multifunction_spin.setProperty("value", 10)
        self.scoring_multifunction_spin.setObjectName("scoring_multifunction_spin")
        self.gridLayout_5.addWidget(self.scoring_multifunction_spin, 3, 3, 1, 1)
        self.scoring_multifunction_lbl = QtWidgets.QLabel(self.scoring_widget)
        self.scoring_multifunction_lbl.setObjectName("scoring_multifunction_lbl")
        self.gridLayout_5.addWidget(self.scoring_multifunction_lbl, 3, 1, 1, 1)
        self.scoring_method_lbl = QtWidgets.QLabel(self.scoring_widget)
        self.scoring_method_lbl.setObjectName("scoring_method_lbl")
        self.gridLayout_5.addWidget(self.scoring_method_lbl, 1, 1, 1, 2)
        self.scoring_method_check = QtWidgets.QCheckBox(self.scoring_widget)
        self.scoring_method_check.setObjectName("scoring_method_check")
        self.gridLayout_5.addWidget(self.scoring_method_check, 2, 3, 1, 1)
        self.verticalLayout_4.addWidget(self.scoring_widget)
        self.evaluation_scrollarea.setWidget(self.scrollAreaWidgetContents_2)
        self.verticalLayout_5.addWidget(self.evaluation_scrollarea)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/Bar-chart-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.service.addTab(self.evaluation, icon6, "")
        self.verticalLayout.addWidget(self.service)
        self.line = QtWidgets.QFrame(self.parameters)
        self.line.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.gridLayout.addWidget(self.parameters, 0, 1, 1, 1)
        self.line_3 = QtWidgets.QFrame(NbSLayoutGen_Gui)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setObjectName("line_3")
        self.gridLayout.addWidget(self.line_3, 3, 0, 1, 2)

        self.retranslateUi(NbSLayoutGen_Gui)
        self.service.setCurrentIndex(0)
        self.scoring_strat_combo.setCurrentIndex(0)
        self.scoring_method_combo.setCurrentIndex(1)
        self.close_button.clicked.connect(NbSLayoutGen_Gui.reject)
        QtCore.QMetaObject.connectSlotsByName(NbSLayoutGen_Gui)

    def retranslateUi(self, NbSLayoutGen_Gui):
        _translate = QtCore.QCoreApplication.translate
        NbSLayoutGen_Gui.setWindowTitle(_translate("NbSLayoutGen_Gui", "Generate Nature-based Solution Schemes"))
        self.ok_button.setWhatsThis(_translate("NbSLayoutGen_Gui", "<html><head/><body><p>Resets all parameters of this module in the current \'scenario time step\' to the default values.</p></body></html>"))
        self.ok_button.setText(_translate("NbSLayoutGen_Gui", "OK"))
        self.close_button.setText(_translate("NbSLayoutGen_Gui", "Close"))
        self.help_button.setText(_translate("NbSLayoutGen_Gui", "Help"))
        self.description.setHtml(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; font-weight:600;\">Generate Nature-based solution layouts</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; font-weight:600;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This module generates entire NbS schemes to deliver on a range of stormwater management and stormwater harvesting targets at different service levels. These can be set prior to generation, allowing UrbanBEATS to then explore the solution space and then evaluate and score layouts according to scale preference, technological preference and even location preference.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Pre-requisites:</span><span style=\" font-size:8pt;\"> Urban form information (and all its pre-requisites), NbS Design Toolbox</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Grid Restrictions: </span><span style=\" font-size:8pt;\">Does not run on Rasters</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Reference:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- Bach, P.M., McCarthy, D.T., Urich, C., Sitzenfrei, R., Kleidorfer, M., Rauch, W. and Deletic, A., 2013. A planning algorithm for quantifying decentralised water management opportunities in urban environments. Water Science and Technology, 68(8), pp.1857-1865.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- Bach, P.M., Kuller, M., McCarthy, D.T. and Deletic, A., 2020. A spatial planning-support system for generating decentralised urban stormwater management schemes. Science of The Total Environment, 726, p.138282.</span><span style=\" font-size:8pt; font-weight:600;\"> </span></p></body></html>"))
        self.run_button.setText(_translate("NbSLayoutGen_Gui", "Run"))
        self.title.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">SETTINGS</span></p></body></html>"))
        self.asset_col_title.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Target Asset Collection</span></p></body></html>"))
        self.assetcol_combo.setItemText(0, _translate("NbSLayoutGen_Gui", "(select asset collection)"))
        self.gridname_lbl.setWhatsThis(_translate("NbSLayoutGen_Gui", "Width of the square cell in the city grid in metres"))
        self.gridname_lbl.setText(_translate("NbSLayoutGen_Gui", "Select collection:"))
        self.asset_col_title_2.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-weight:600;\">Layout Specifications</span></p></body></html>"))
        self.gridname_lbl_2.setWhatsThis(_translate("NbSLayoutGen_Gui", "Width of the square cell in the city grid in metres"))
        self.gridname_lbl_2.setText(_translate("NbSLayoutGen_Gui", "Set up the rules for the generation of NbS Technology Layouts that the model should follow."))
        self.service_title.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.service_title.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">SERVICE LEVELS AND COVERAGE OF NBS SOLUTION</span></p></body></html>"))
        self.service_lbl.setText(_translate("NbSLayoutGen_Gui", "Specify minimum achievable and desired levels of service for following objectives:"))
        self.runoff_img.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.runoff_lbl.setToolTip(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.runoff_lbl.setWhatsThis(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.runoff_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">RUNOFF VOLUME REDUCTION</span></p></body></html>"))
        self.service_runoff_spin.setSuffix(_translate("NbSLayoutGen_Gui", "%"))
        self.runoff_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-style:italic;\">(of basin impervious area)</span></p></body></html>"))
        self.pollute_img.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.pollute_lbl.setToolTip(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.pollute_lbl.setWhatsThis(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.pollute_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">POLLUTION LOAD REDUCTION</span></p></body></html>"))
        self.service_pollute_spin.setSuffix(_translate("NbSLayoutGen_Gui", "%"))
        self.pollute_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-style:italic;\">(of basin impervious area)</span></p></body></html>"))
        self.recycle_img.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.recycle_lbl.setToolTip(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.recycle_lbl.setWhatsThis(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:10pt;\">Reducing the impact of impervious surfaces on increasing stormwater runoff volumes. This objective aims to reduce total annual runoff volume by a specified %</span></p></body></html>"))
        self.recycle_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">STORMWATER HARVESTING</span></p></body></html>"))
        self.service_recycle_spin.setSuffix(_translate("NbSLayoutGen_Gui", "%"))
        self.recycle_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-style:italic;\">(of basin impervious area)</span></p></body></html>"))
        self.service_luc_lbl.setText(_translate("NbSLayoutGen_Gui", "Select local urban areas that these service levels should apply to..."))
        self.service_luc_check.setText(_translate("NbSLayoutGen_Gui", "Apply service to a selection of specific land uses"))
        self.service_res.setText(_translate("NbSLayoutGen_Gui", "Residential Dwellings"))
        self.service_hi.setText(_translate("NbSLayoutGen_Gui", "Heavy Industrial Estates"))
        self.service_li.setText(_translate("NbSLayoutGen_Gui", "Light Industrial Estates"))
        self.service_hdr.setText(_translate("NbSLayoutGen_Gui", "Residential Apartments"))
        self.service_com.setText(_translate("NbSLayoutGen_Gui", "Commercial Estates"))
        self.service_redundancy_lbl.setText(_translate("NbSLayoutGen_Gui", "Set Allowable Level of Service Redundancy [% exceedence]"))
        self.service_redundancy.setSuffix(_translate("NbSLayoutGen_Gui", "%"))
        self.montecarlo_settings_title.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.montecarlo_settings_title.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">SETTINGS FOR GENERATION AND FILTERING OF LAYOUTS</span></p></body></html>"))
        self.montecarlo_lbl.setText(_translate("NbSLayoutGen_Gui", "The algorithm uses a Monte Carlo approach to generate different layouts. Adjust key settings here."))
        self.montecarlo_select_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-style:italic;\">(default: 10)</span></p></body></html>"))
        self.montecarlo_collect_lbl.setText(_translate("NbSLayoutGen_Gui", "Collection method:"))
        self.montecarlo_ci_radio.setText(_translate("NbSLayoutGen_Gui", "Confidence Intervals"))
        self.montecarlo_select_lbl.setText(_translate("NbSLayoutGen_Gui", "Final # of strategies to select: "))
        self.montecarlo_maxiter_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-style:italic;\">(default: 1000)</span></p></body></html>"))
        self.montecarlo_score_lbl.setText(_translate("NbSLayoutGen_Gui", "Selection strategy:"))
        self.montecarlo_ranks_radio.setText(_translate("NbSLayoutGen_Gui", "Ranks"))
        self.montecarlo_score_combo.setItemText(0, _translate("NbSLayoutGen_Gui", "Top Scoring Strategies"))
        self.montecarlo_score_combo.setItemText(1, _translate("NbSLayoutGen_Gui", "Random (weighted probabilities)"))
        self.montecarlo_maxiter_lbl.setText(_translate("NbSLayoutGen_Gui", "Max. number of iterations:"))
        self.montecarlo_method_lbl.setText(_translate("NbSLayoutGen_Gui", "Search Method: "))
        self.montecarlo_method_combo.setItemText(0, _translate("NbSLayoutGen_Gui", "Untargeted Search (\'for\')"))
        self.montecarlo_method_combo.setItemText(1, _translate("NbSLayoutGen_Gui", "Targeted Search (\'while\')"))
        self.service.setTabText(self.service.indexOf(self.service1), _translate("NbSLayoutGen_Gui", "Service Provision"))
        self.pref_title.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.pref_title.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">SELECT EVALUATION CRITERIA AND PREFERENCE SCORES</span></p></body></html>"))
        self.scalepref_title.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">SCALE PREFERENCE FOR PLANNING</span></p></body></html>"))
        self.scalepref_descr.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p>Allow the model to bias towards what level of scales of systems the model should generate (note that this is also dependent on what available technologies were planned previously).</p></body></html>"))
        self.scalepref_check.setText(_translate("NbSLayoutGen_Gui", "Assign a scale preference score to generated layouts"))
        self.scalepref_small_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">At-source</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">(Small-scale)</span></p></body></html>"))
        self.scalepref_large_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">End-of-Pipe</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">(Large-scale)</span></p></body></html>"))
        self.scalepref_mix_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Mix of Systems</span></p></body></html>"))
        self.techpref_title.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">TECHNOLOGY PREFERENCE MATRIX</span></p></body></html>"))
        self.techpref_descr.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p>Allow the model to bias towards certain technology choices over others.</p></body></html>"))
        self.techpref_check.setText(_translate("NbSLayoutGen_Gui", "Assign a technology preference score to generated layouts"))
        self.techpref_ubeatsdefault_check.setText(_translate("NbSLayoutGen_Gui", "Use UrbanBEATS\' Default Matrix"))
        self.techpref_matrixbrowse.setText(_translate("NbSLayoutGen_Gui", "Browse..."))
        self.techpref_lbl2.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p align=\"right\">or</p></body></html>"))
        self.techpref_matrix_lbl.setText(_translate("NbSLayoutGen_Gui", "<html><head/><body><p align=\"right\">Load Custom Scoring Matrix (.csv)</p></body></html>"))
        self.techpref_weights_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Adjust Weights for different technological criteria...</p></body></html>"))
        self.techpref_tech_check.setText(_translate("NbSLayoutGen_Gui", "Technical"))
        self.techpref_soc_check.setText(_translate("NbSLayoutGen_Gui", "Social"))
        self.techpref_weights_lbl2.setWhatsThis(_translate("NbSLayoutGen_Gui", "Adjust the weighting of each criteria. Assign an importance score between 1 and 10 to each of the selected bottom lines."))
        self.techpref_weights_lbl2.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Include:</span></p></body></html>"))
        self.techpref_env_check.setText(_translate("NbSLayoutGen_Gui", "Environmental"))
        self.techpref_econ_check.setText(_translate("NbSLayoutGen_Gui", "Economic"))
        self.techpref_weights_lbl3.setWhatsThis(_translate("NbSLayoutGen_Gui", "Adjust the weighting of each criteria. Assign an importance score between 1 and 10 to each of the selected bottom lines."))
        self.techpref_weights_lbl3.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Weights (1-100)</p></body></html>"))
        self.scoring_title.setWhatsThis(_translate("NbSLayoutGen_Gui", "Select what design goals to consider and what priority they take over each other. Highest priority (1) and Lowest priority (3) influence technology\'s chance of being implemented. Note that equal priority can be set as well, in which case no one design rationale is more important than the other."))
        self.scoring_title.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">CUSTOMIZE SCORING OF LAYOUTS</span></p></body></html>"))
        self.scoring_descr.setText(_translate("NbSLayoutGen_Gui", "Setup scoring method for the generated NbS Layouts"))
        self.scoring_strat_combo.setItemText(0, _translate("NbSLayoutGen_Gui", "Service-based weighting (no penalties)"))
        self.scoring_strat_combo.setItemText(1, _translate("NbSLayoutGen_Gui", "Service-based weightings (linear penalty model)"))
        self.scoring_strat_combo.setItemText(2, _translate("NbSLayoutGen_Gui", "Service-based weightings (non-linear penalty model)"))
        self.scoring_method_combo.setItemText(0, _translate("NbSLayoutGen_Gui", "Weighted Product Model (WPM)"))
        self.scoring_method_combo.setItemText(1, _translate("NbSLayoutGen_Gui", "Weighted Sum Model (WSM)"))
        self.scoring_strat_lbl.setText(_translate("NbSLayoutGen_Gui", "Scoring strategy:"))
        self.scoring_multifunction_spin.setSuffix(_translate("NbSLayoutGen_Gui", "%"))
        self.scoring_multifunction_lbl.setWhatsThis(_translate("NbSLayoutGen_Gui", "Scoring method choice influences how the points are added up and weighted against each other and how each option\'s final score is evaluated. Default method will be the AHP."))
        self.scoring_multifunction_lbl.setText(_translate("NbSLayoutGen_Gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8.25pt;\">Multi-functionality bonus:</span></p></body></html>"))
        self.scoring_method_lbl.setText(_translate("NbSLayoutGen_Gui", "Scoring method:"))
        self.scoring_method_check.setWhatsThis(_translate("NbSLayoutGen_Gui", "Check if you wish to add a stochastic disturbance to the scoring process. Modifies the scoring with an added randomness."))
        self.scoring_method_check.setText(_translate("NbSLayoutGen_Gui", "Include Stochastic Noise"))
        self.service.setTabText(self.service.indexOf(self.evaluation), _translate("NbSLayoutGen_Gui", "Evaluation Criteria"))
# import ubeats_rc
