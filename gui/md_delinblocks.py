# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'md_delinblocks.ui'
#
# Created by: PyQt5 UI code generator 5.6
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Delinblocks_Dialog(object):
    def setupUi(self, Delinblocks_Dialog):
        Delinblocks_Dialog.setObjectName("Delinblocks_Dialog")
        Delinblocks_Dialog.resize(780, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(Delinblocks_Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title_frame = QtWidgets.QFrame(Delinblocks_Dialog)
        self.title_frame.setMaximumSize(QtCore.QSize(16777215, 65))
        self.title_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.title_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.title_frame.setObjectName("title_frame")
        self.gridLayout = QtWidgets.QGridLayout(self.title_frame)
        self.gridLayout.setObjectName("gridLayout")
        self.module_logo = QtWidgets.QLabel(self.title_frame)
        self.module_logo.setMinimumSize(QtCore.QSize(40, 40))
        self.module_logo.setMaximumSize(QtCore.QSize(40, 40))
        self.module_logo.setText("")
        self.module_logo.setPixmap(QtGui.QPixmap(":/images/images/md_spatial.png"))
        self.module_logo.setObjectName("module_logo")
        self.gridLayout.addWidget(self.module_logo, 0, 0, 3, 1)
        self.title = QtWidgets.QLabel(self.title_frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setObjectName("title")
        self.gridLayout.addWidget(self.title, 0, 2, 1, 1)
        self.subtitle = QtWidgets.QLabel(self.title_frame)
        self.subtitle.setWordWrap(False)
        self.subtitle.setObjectName("subtitle")
        self.gridLayout.addWidget(self.subtitle, 1, 2, 1, 1)
        self.verticalLayout.addWidget(self.title_frame)
        self.title_line = QtWidgets.QFrame(Delinblocks_Dialog)
        self.title_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.title_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.title_line.setObjectName("title_line")
        self.verticalLayout.addWidget(self.title_line)
        self.module_widget = QtWidgets.QWidget(Delinblocks_Dialog)
        self.module_widget.setObjectName("module_widget")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.module_widget)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.sidebar_widget = QtWidgets.QWidget(self.module_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sidebar_widget.sizePolicy().hasHeightForWidth())
        self.sidebar_widget.setSizePolicy(sizePolicy)
        self.sidebar_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.sidebar_widget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.sidebar_widget.setObjectName("sidebar_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.sidebar_widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.sidebar_title = QtWidgets.QLabel(self.sidebar_widget)
        self.sidebar_title.setObjectName("sidebar_title")
        self.verticalLayout_2.addWidget(self.sidebar_title)
        self.year_combo = QtWidgets.QComboBox(self.sidebar_widget)
        self.year_combo.setMinimumSize(QtCore.QSize(100, 0))
        self.year_combo.setObjectName("year_combo")
        self.year_combo.addItem("")
        self.verticalLayout_2.addWidget(self.year_combo)
        self.same_params = QtWidgets.QCheckBox(self.sidebar_widget)
        self.same_params.setObjectName("same_params")
        self.verticalLayout_2.addWidget(self.same_params)
        self.sidebar_line = QtWidgets.QFrame(self.sidebar_widget)
        self.sidebar_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.sidebar_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.sidebar_line.setObjectName("sidebar_line")
        self.verticalLayout_2.addWidget(self.sidebar_line)
        self.module_img = QtWidgets.QLabel(self.sidebar_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.module_img.sizePolicy().hasHeightForWidth())
        self.module_img.setSizePolicy(sizePolicy)
        self.module_img.setMinimumSize(QtCore.QSize(140, 100))
        self.module_img.setMaximumSize(QtCore.QSize(140, 100))
        self.module_img.setText("")
        self.module_img.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_pic.png"))
        self.module_img.setObjectName("module_img")
        self.verticalLayout_2.addWidget(self.module_img)
        self.description = QtWidgets.QTextBrowser(self.sidebar_widget)
        self.description.setMinimumSize(QtCore.QSize(140, 0))
        self.description.setMaximumSize(QtCore.QSize(140, 16777215))
        self.description.setObjectName("description")
        self.verticalLayout_2.addWidget(self.description)
        self.horizontalLayout_6.addWidget(self.sidebar_widget)
        self.parameters = QtWidgets.QTabWidget(self.module_widget)
        self.parameters.setObjectName("parameters")
        self.inputs_tab = QtWidgets.QWidget()
        self.inputs_tab.setObjectName("inputs_tab")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.inputs_tab)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.inputs_scrollArea = QtWidgets.QScrollArea(self.inputs_tab)
        self.inputs_scrollArea.setWidgetResizable(True)
        self.inputs_scrollArea.setObjectName("inputs_scrollArea")
        self.inputs_contents = QtWidgets.QWidget()
        self.inputs_contents.setGeometry(QtCore.QRect(0, 0, 537, 330))
        self.inputs_contents.setObjectName("inputs_contents")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.inputs_contents)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.descr1 = QtWidgets.QLabel(self.inputs_contents)
        self.descr1.setObjectName("descr1")
        self.verticalLayout_12.addWidget(self.descr1)
        self.descr2 = QtWidgets.QLabel(self.inputs_contents)
        self.descr2.setWordWrap(True)
        self.descr2.setObjectName("descr2")
        self.verticalLayout_12.addWidget(self.descr2)
        self.datasets = QtWidgets.QWidget(self.inputs_contents)
        self.datasets.setObjectName("datasets")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.datasets)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.landuse_lbl = QtWidgets.QLabel(self.datasets)
        self.landuse_lbl.setObjectName("landuse_lbl")
        self.gridLayout_6.addWidget(self.landuse_lbl, 1, 0, 1, 1)
        self.landuse_combo = QtWidgets.QComboBox(self.datasets)
        self.landuse_combo.setObjectName("landuse_combo")
        self.gridLayout_6.addWidget(self.landuse_combo, 1, 1, 1, 1)
        self.lu_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.lu_fromurbandev.setObjectName("lu_fromurbandev")
        self.gridLayout_6.addWidget(self.lu_fromurbandev, 1, 2, 1, 1)
        self.pop_combo = QtWidgets.QComboBox(self.datasets)
        self.pop_combo.setObjectName("pop_combo")
        self.gridLayout_6.addWidget(self.pop_combo, 2, 1, 1, 1)
        self.pop_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.pop_fromurbandev.setObjectName("pop_fromurbandev")
        self.gridLayout_6.addWidget(self.pop_fromurbandev, 2, 2, 1, 1)
        self.pop_lbl = QtWidgets.QLabel(self.datasets)
        self.pop_lbl.setObjectName("pop_lbl")
        self.gridLayout_6.addWidget(self.pop_lbl, 2, 0, 1, 1)
        self.div1 = QtWidgets.QFrame(self.datasets)
        self.div1.setFrameShape(QtWidgets.QFrame.HLine)
        self.div1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div1.setObjectName("div1")
        self.gridLayout_6.addWidget(self.div1, 4, 0, 1, 1)
        self.elev_combo = QtWidgets.QComboBox(self.datasets)
        self.elev_combo.setObjectName("elev_combo")
        self.gridLayout_6.addWidget(self.elev_combo, 3, 1, 1, 1)
        self.elev_lbl = QtWidgets.QLabel(self.datasets)
        self.elev_lbl.setObjectName("elev_lbl")
        self.gridLayout_6.addWidget(self.elev_lbl, 3, 0, 1, 1)
        self.div2 = QtWidgets.QFrame(self.datasets)
        self.div2.setFrameShape(QtWidgets.QFrame.HLine)
        self.div2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div2.setObjectName("div2")
        self.gridLayout_6.addWidget(self.div2, 4, 1, 1, 1)
        self.div3 = QtWidgets.QFrame(self.datasets)
        self.div3.setFrameShape(QtWidgets.QFrame.HLine)
        self.div3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div3.setObjectName("div3")
        self.gridLayout_6.addWidget(self.div3, 4, 2, 1, 1)
        self.locality_combo = QtWidgets.QComboBox(self.datasets)
        self.locality_combo.setObjectName("locality_combo")
        self.gridLayout_6.addWidget(self.locality_combo, 7, 1, 1, 1)
        self.employment_combo = QtWidgets.QComboBox(self.datasets)
        self.employment_combo.setObjectName("employment_combo")
        self.gridLayout_6.addWidget(self.employment_combo, 6, 1, 1, 1)
        self.descr3 = QtWidgets.QLabel(self.datasets)
        self.descr3.setObjectName("descr3")
        self.gridLayout_6.addWidget(self.descr3, 5, 0, 1, 1)
        self.emp_lbl = QtWidgets.QLabel(self.datasets)
        self.emp_lbl.setObjectName("emp_lbl")
        self.gridLayout_6.addWidget(self.emp_lbl, 6, 0, 1, 1)
        self.emp_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.emp_fromurbandev.setObjectName("emp_fromurbandev")
        self.gridLayout_6.addWidget(self.emp_fromurbandev, 6, 2, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.datasets)
        self.label_32.setObjectName("label_32")
        self.gridLayout_6.addWidget(self.label_32, 7, 0, 1, 1)
        self.soil_lbl = QtWidgets.QLabel(self.datasets)
        self.soil_lbl.setObjectName("soil_lbl")
        self.gridLayout_6.addWidget(self.soil_lbl, 8, 0, 1, 1)
        self.soil_combo = QtWidgets.QComboBox(self.datasets)
        self.soil_combo.setObjectName("soil_combo")
        self.gridLayout_6.addWidget(self.soil_combo, 8, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.datasets)
        self.label_5.setObjectName("label_5")
        self.gridLayout_6.addWidget(self.label_5, 0, 0, 1, 1)
        self.verticalLayout_12.addWidget(self.datasets)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_12.addItem(spacerItem)
        self.inputs_scrollArea.setWidget(self.inputs_contents)
        self.verticalLayout_10.addWidget(self.inputs_scrollArea)
        self.parameters.addTab(self.inputs_tab, "")
        self.geometry_tab = QtWidgets.QWidget()
        self.geometry_tab.setObjectName("geometry_tab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.geometry_tab)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.geometry_scrollArea = QtWidgets.QScrollArea(self.geometry_tab)
        self.geometry_scrollArea.setWidgetResizable(True)
        self.geometry_scrollArea.setObjectName("geometry_scrollArea")
        self.geometry_contents = QtWidgets.QWidget()
        self.geometry_contents.setGeometry(QtCore.QRect(0, 0, 537, 481))
        self.geometry_contents.setObjectName("geometry_contents")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.geometry_contents)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.geometry_title = QtWidgets.QLabel(self.geometry_contents)
        self.geometry_title.setObjectName("geometry_title")
        self.verticalLayout_5.addWidget(self.geometry_title)
        self.geometry_lbl1 = QtWidgets.QLabel(self.geometry_contents)
        self.geometry_lbl1.setWordWrap(True)
        self.geometry_lbl1.setObjectName("geometry_lbl1")
        self.verticalLayout_5.addWidget(self.geometry_lbl1)
        self.geometry_widget = QtWidgets.QWidget(self.geometry_contents)
        self.geometry_widget.setObjectName("geometry_widget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.geometry_widget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.rep_lbl = QtWidgets.QLabel(self.geometry_widget)
        self.rep_lbl.setObjectName("rep_lbl")
        self.horizontalLayout_7.addWidget(self.rep_lbl)
        self.rep_combo = QtWidgets.QComboBox(self.geometry_widget)
        self.rep_combo.setMinimumSize(QtCore.QSize(0, 0))
        self.rep_combo.setIconSize(QtCore.QSize(30, 30))
        self.rep_combo.setObjectName("rep_combo")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images/md_spatial_block.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rep_combo.addItem(icon, "")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/images/images/md_spatial_patch.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rep_combo.addItem(icon1, "")
        self.horizontalLayout_7.addWidget(self.rep_combo)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem1)
        self.verticalLayout_5.addWidget(self.geometry_widget)
        self.resolution_widget = QtWidgets.QWidget(self.geometry_contents)
        self.resolution_widget.setObjectName("resolution_widget")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.resolution_widget)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.resolution_lbl = QtWidgets.QLabel(self.resolution_widget)
        self.resolution_lbl.setObjectName("resolution_lbl")
        self.horizontalLayout_8.addWidget(self.resolution_lbl)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem2)
        self.resolution_spin = QtWidgets.QSpinBox(self.resolution_widget)
        self.resolution_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.resolution_spin.setMinimum(200)
        self.resolution_spin.setMaximum(5000)
        self.resolution_spin.setSingleStep(50)
        self.resolution_spin.setProperty("value", 500)
        self.resolution_spin.setObjectName("resolution_spin")
        self.horizontalLayout_8.addWidget(self.resolution_spin)
        self.resolution_auto = QtWidgets.QCheckBox(self.resolution_widget)
        self.resolution_auto.setObjectName("resolution_auto")
        self.horizontalLayout_8.addWidget(self.resolution_auto)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem3)
        self.verticalLayout_5.addWidget(self.resolution_widget)
        self.geometryStack = QtWidgets.QStackedWidget(self.geometry_contents)
        self.geometryStack.setObjectName("geometryStack")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.geometry_lbl2 = QtWidgets.QLabel(self.page)
        self.geometry_lbl2.setObjectName("geometry_lbl2")
        self.verticalLayout_9.addWidget(self.geometry_lbl2)
        self.geometry_lbl3 = QtWidgets.QLabel(self.page)
        self.geometry_lbl3.setWordWrap(True)
        self.geometry_lbl3.setObjectName("geometry_lbl3")
        self.verticalLayout_9.addWidget(self.geometry_lbl3)
        self.blocknhd_widget = QtWidgets.QWidget(self.page)
        self.blocknhd_widget.setObjectName("blocknhd_widget")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.blocknhd_widget)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.img_moore = QtWidgets.QLabel(self.blocknhd_widget)
        self.img_moore.setMinimumSize(QtCore.QSize(50, 50))
        self.img_moore.setMaximumSize(QtCore.QSize(50, 50))
        self.img_moore.setText("")
        self.img_moore.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_moore.png"))
        self.img_moore.setObjectName("img_moore")
        self.horizontalLayout_9.addWidget(self.img_moore)
        self.radio_moore = QtWidgets.QRadioButton(self.blocknhd_widget)
        self.radio_moore.setEnabled(True)
        self.radio_moore.setWhatsThis("")
        self.radio_moore.setCheckable(True)
        self.radio_moore.setObjectName("radio_moore")
        self.horizontalLayout_9.addWidget(self.radio_moore)
        self.img_vonNeu = QtWidgets.QLabel(self.blocknhd_widget)
        self.img_vonNeu.setMinimumSize(QtCore.QSize(50, 50))
        self.img_vonNeu.setMaximumSize(QtCore.QSize(50, 50))
        self.img_vonNeu.setText("")
        self.img_vonNeu.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_vNeumann.png"))
        self.img_vonNeu.setObjectName("img_vonNeu")
        self.horizontalLayout_9.addWidget(self.img_vonNeu)
        self.radio_vonNeu = QtWidgets.QRadioButton(self.blocknhd_widget)
        self.radio_vonNeu.setWhatsThis("")
        self.radio_vonNeu.setChecked(False)
        self.radio_vonNeu.setObjectName("radio_vonNeu")
        self.horizontalLayout_9.addWidget(self.radio_vonNeu)
        self.verticalLayout_9.addWidget(self.blocknhd_widget)
        self.geometry_lbl4 = QtWidgets.QLabel(self.page)
        self.geometry_lbl4.setObjectName("geometry_lbl4")
        self.verticalLayout_9.addWidget(self.geometry_lbl4)
        self.spatialindices_check = QtWidgets.QCheckBox(self.page)
        self.spatialindices_check.setObjectName("spatialindices_check")
        self.verticalLayout_9.addWidget(self.spatialindices_check)
        self.patchdelin_check = QtWidgets.QCheckBox(self.page)
        self.patchdelin_check.setObjectName("patchdelin_check")
        self.verticalLayout_9.addWidget(self.patchdelin_check)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem4)
        self.geometryStack.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.page_2)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.geometry_lbl5 = QtWidgets.QLabel(self.page_2)
        self.geometry_lbl5.setObjectName("geometry_lbl5")
        self.verticalLayout_11.addWidget(self.geometry_lbl5)
        self.geometry_lbl6 = QtWidgets.QLabel(self.page_2)
        self.geometry_lbl6.setWordWrap(True)
        self.geometry_lbl6.setObjectName("geometry_lbl6")
        self.verticalLayout_11.addWidget(self.geometry_lbl6)
        self.patchnhd_widget = QtWidgets.QWidget(self.page_2)
        self.patchnhd_widget.setObjectName("patchnhd_widget")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.patchnhd_widget)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.img_radius = QtWidgets.QLabel(self.patchnhd_widget)
        self.img_radius.setMinimumSize(QtCore.QSize(50, 50))
        self.img_radius.setMaximumSize(QtCore.QSize(50, 50))
        self.img_radius.setText("")
        self.img_radius.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_patchradius.png"))
        self.img_radius.setObjectName("img_radius")
        self.horizontalLayout_10.addWidget(self.img_radius)
        self.radio_radius = QtWidgets.QRadioButton(self.patchnhd_widget)
        self.radio_radius.setEnabled(True)
        self.radio_radius.setWhatsThis("")
        self.radio_radius.setCheckable(True)
        self.radio_radius.setObjectName("radio_radius")
        self.horizontalLayout_10.addWidget(self.radio_radius)
        self.img_shared = QtWidgets.QLabel(self.patchnhd_widget)
        self.img_shared.setMinimumSize(QtCore.QSize(50, 50))
        self.img_shared.setMaximumSize(QtCore.QSize(50, 50))
        self.img_shared.setText("")
        self.img_shared.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_patchedges.png"))
        self.img_shared.setObjectName("img_shared")
        self.horizontalLayout_10.addWidget(self.img_shared)
        self.radio_shared = QtWidgets.QRadioButton(self.patchnhd_widget)
        self.radio_shared.setWhatsThis("")
        self.radio_shared.setChecked(False)
        self.radio_shared.setObjectName("radio_shared")
        self.horizontalLayout_10.addWidget(self.radio_shared)
        self.verticalLayout_11.addWidget(self.patchnhd_widget)
        self.search_radius_widget = QtWidgets.QWidget(self.page_2)
        self.search_radius_widget.setObjectName("search_radius_widget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.search_radius_widget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.radius_lbl = QtWidgets.QLabel(self.search_radius_widget)
        self.radius_lbl.setObjectName("radius_lbl")
        self.horizontalLayout_3.addWidget(self.radius_lbl)
        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.radius_spin = QtWidgets.QSpinBox(self.search_radius_widget)
        self.radius_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.radius_spin.setMinimum(200)
        self.radius_spin.setMaximum(5000)
        self.radius_spin.setSingleStep(50)
        self.radius_spin.setProperty("value", 500)
        self.radius_spin.setObjectName("radius_spin")
        self.horizontalLayout_3.addWidget(self.radius_spin)
        self.radius_lbl2 = QtWidgets.QLabel(self.search_radius_widget)
        self.radius_lbl2.setObjectName("radius_lbl2")
        self.horizontalLayout_3.addWidget(self.radius_lbl2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.verticalLayout_11.addWidget(self.search_radius_widget)
        self.geometry_lbl7 = QtWidgets.QLabel(self.page_2)
        self.geometry_lbl7.setObjectName("geometry_lbl7")
        self.verticalLayout_11.addWidget(self.geometry_lbl7)
        self.patchchar_check = QtWidgets.QCheckBox(self.page_2)
        self.patchchar_check.setObjectName("patchchar_check")
        self.verticalLayout_11.addWidget(self.patchchar_check)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_11.addItem(spacerItem7)
        self.geometryStack.addWidget(self.page_2)
        self.verticalLayout_5.addWidget(self.geometryStack)
        self.geometry_scrollArea.setWidget(self.geometry_contents)
        self.verticalLayout_3.addWidget(self.geometry_scrollArea)
        self.parameters.addTab(self.geometry_tab, "")
        self.geography_tab = QtWidgets.QWidget()
        self.geography_tab.setObjectName("geography_tab")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.geography_tab)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.geography_scrollArea = QtWidgets.QScrollArea(self.geography_tab)
        self.geography_scrollArea.setWidgetResizable(True)
        self.geography_scrollArea.setObjectName("geography_scrollArea")
        self.geography_contents = QtWidgets.QWidget()
        self.geography_contents.setGeometry(QtCore.QRect(0, 0, 537, 463))
        self.geography_contents.setObjectName("geography_contents")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.geography_contents)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.geography_title = QtWidgets.QLabel(self.geography_contents)
        self.geography_title.setObjectName("geography_title")
        self.verticalLayout_7.addWidget(self.geography_title)
        self.geography_lbl1 = QtWidgets.QLabel(self.geography_contents)
        self.geography_lbl1.setWordWrap(True)
        self.geography_lbl1.setObjectName("geography_lbl1")
        self.verticalLayout_7.addWidget(self.geography_lbl1)
        self.boundary_widget = QtWidgets.QWidget(self.geography_contents)
        self.boundary_widget.setObjectName("boundary_widget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.boundary_widget)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.geopolitical_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.geopolitical_combo.setObjectName("geopolitical_combo")
        self.geopolitical_combo.addItem("")
        self.gridLayout_5.addWidget(self.geopolitical_combo, 1, 2, 1, 1)
        self.geopolitical_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.geopolitical_line.setObjectName("geopolitical_line")
        self.gridLayout_5.addWidget(self.geopolitical_line, 3, 2, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem8, 1, 0, 1, 1)
        self.suburb_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.suburb_line.setObjectName("suburb_line")
        self.gridLayout_5.addWidget(self.suburb_line, 7, 2, 1, 1)
        self.suburb_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.suburb_lbl.setObjectName("suburb_lbl")
        self.gridLayout_5.addWidget(self.suburb_lbl, 7, 1, 1, 1)
        self.geopolitical_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.geopolitical_lbl.setObjectName("geopolitical_lbl")
        self.gridLayout_5.addWidget(self.geopolitical_lbl, 3, 1, 1, 1)
        self.geopolitical_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.geopolitical_check.setObjectName("geopolitical_check")
        self.gridLayout_5.addWidget(self.geopolitical_check, 1, 1, 1, 1)
        self.suburb_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.suburb_combo.setObjectName("suburb_combo")
        self.suburb_combo.addItem("")
        self.gridLayout_5.addWidget(self.suburb_combo, 4, 2, 1, 1)
        self.suburb_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.suburb_check.setObjectName("suburb_check")
        self.gridLayout_5.addWidget(self.suburb_check, 4, 1, 1, 1)
        self.watermgmt_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.watermgmt_check.setObjectName("watermgmt_check")
        self.gridLayout_5.addWidget(self.watermgmt_check, 8, 1, 1, 1)
        self.watermgmt_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.watermgmt_combo.setObjectName("watermgmt_combo")
        self.watermgmt_combo.addItem("")
        self.gridLayout_5.addWidget(self.watermgmt_combo, 8, 2, 1, 1)
        self.watermgmt_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.watermgmt_line.setObjectName("watermgmt_line")
        self.gridLayout_5.addWidget(self.watermgmt_line, 9, 2, 1, 1)
        self.watermgmt_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.watermgmt_lbl.setObjectName("watermgmt_lbl")
        self.gridLayout_5.addWidget(self.watermgmt_lbl, 9, 1, 1, 1)
        self.verticalLayout_7.addWidget(self.boundary_widget)
        self.geography_lbl2 = QtWidgets.QLabel(self.geography_contents)
        self.geography_lbl2.setObjectName("geography_lbl2")
        self.verticalLayout_7.addWidget(self.geography_lbl2)
        self.considergeo_check = QtWidgets.QCheckBox(self.geography_contents)
        self.considergeo_check.setWhatsThis("")
        self.considergeo_check.setObjectName("considergeo_check")
        self.verticalLayout_7.addWidget(self.considergeo_check)
        self.region_widget = QtWidgets.QWidget(self.geography_contents)
        self.region_widget.setObjectName("region_widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.region_widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.city_combo = QtWidgets.QComboBox(self.region_widget)
        self.city_combo.setObjectName("city_combo")
        self.city_combo.addItem("")
        self.gridLayout_2.addWidget(self.city_combo, 2, 2, 1, 1)
        self.cbdlat_box = QtWidgets.QLineEdit(self.region_widget)
        self.cbdlat_box.setObjectName("cbdlat_box")
        self.gridLayout_2.addWidget(self.cbdlat_box, 7, 2, 1, 1)
        self.cbdmark_check = QtWidgets.QCheckBox(self.region_widget)
        self.cbdmark_check.setObjectName("cbdmark_check")
        self.gridLayout_2.addWidget(self.cbdmark_check, 8, 2, 1, 1)
        self.cbdlong_box = QtWidgets.QLineEdit(self.region_widget)
        self.cbdlong_box.setObjectName("cbdlong_box")
        self.gridLayout_2.addWidget(self.cbdlong_box, 4, 2, 1, 1)
        self.cbdoption_lbl = QtWidgets.QLabel(self.region_widget)
        self.cbdoption_lbl.setObjectName("cbdoption_lbl")
        self.gridLayout_2.addWidget(self.cbdoption_lbl, 1, 1, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem9, 2, 0, 1, 1)
        self.cbdknown_radio = QtWidgets.QRadioButton(self.region_widget)
        self.cbdknown_radio.setObjectName("cbdknown_radio")
        self.gridLayout_2.addWidget(self.cbdknown_radio, 2, 1, 1, 1)
        self.cbdmanual_radio = QtWidgets.QRadioButton(self.region_widget)
        self.cbdmanual_radio.setObjectName("cbdmanual_radio")
        self.gridLayout_2.addWidget(self.cbdmanual_radio, 4, 1, 1, 1)
        self.lat_lbl = QtWidgets.QLabel(self.region_widget)
        self.lat_lbl.setObjectName("lat_lbl")
        self.gridLayout_2.addWidget(self.lat_lbl, 7, 3, 1, 1)
        self.long_lbl = QtWidgets.QLabel(self.region_widget)
        self.long_lbl.setObjectName("long_lbl")
        self.gridLayout_2.addWidget(self.long_lbl, 4, 3, 1, 1)
        self.verticalLayout_7.addWidget(self.region_widget)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem10)
        self.geography_scrollArea.setWidget(self.geography_contents)
        self.verticalLayout_8.addWidget(self.geography_scrollArea)
        self.parameters.addTab(self.geography_tab, "")
        self.connectivity_tab = QtWidgets.QWidget()
        self.connectivity_tab.setObjectName("connectivity_tab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.connectivity_tab)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.connectivity_scrollArea = QtWidgets.QScrollArea(self.connectivity_tab)
        self.connectivity_scrollArea.setWidgetResizable(True)
        self.connectivity_scrollArea.setObjectName("connectivity_scrollArea")
        self.connectivity_contents = QtWidgets.QWidget()
        self.connectivity_contents.setGeometry(QtCore.QRect(0, 0, 537, 344))
        self.connectivity_contents.setObjectName("connectivity_contents")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.connectivity_contents)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.connectivity_title = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_title.setObjectName("connectivity_title")
        self.verticalLayout_6.addWidget(self.connectivity_title)
        self.connectivity_lbl1 = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_lbl1.setWordWrap(True)
        self.connectivity_lbl1.setObjectName("connectivity_lbl1")
        self.verticalLayout_6.addWidget(self.connectivity_lbl1)
        self.flowpath_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.flowpath_widget.setObjectName("flowpath_widget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.flowpath_widget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.flowpath_lbl = QtWidgets.QLabel(self.flowpath_widget)
        self.flowpath_lbl.setObjectName("flowpath_lbl")
        self.gridLayout_3.addWidget(self.flowpath_lbl, 0, 0, 1, 1)
        self.demsmooth_check = QtWidgets.QCheckBox(self.flowpath_widget)
        self.demsmooth_check.setObjectName("demsmooth_check")
        self.gridLayout_3.addWidget(self.demsmooth_check, 1, 1, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem11, 0, 2, 1, 1)
        self.flowpath_combo = QtWidgets.QComboBox(self.flowpath_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.flowpath_combo.sizePolicy().hasHeightForWidth())
        self.flowpath_combo.setSizePolicy(sizePolicy)
        self.flowpath_combo.setObjectName("flowpath_combo")
        self.flowpath_combo.addItem("")
        self.flowpath_combo.addItem("")
        self.gridLayout_3.addWidget(self.flowpath_combo, 0, 1, 1, 1)
        self.demsmooth_spin = QtWidgets.QSpinBox(self.flowpath_widget)
        self.demsmooth_spin.setMinimum(1)
        self.demsmooth_spin.setMaximum(2)
        self.demsmooth_spin.setObjectName("demsmooth_spin")
        self.gridLayout_3.addWidget(self.demsmooth_spin, 1, 2, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem12, 1, 3, 1, 1)
        self.verticalLayout_6.addWidget(self.flowpath_widget)
        self.flowpath_guide_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.flowpath_guide_widget.setObjectName("flowpath_guide_widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.flowpath_guide_widget)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.natfeature_check = QtWidgets.QCheckBox(self.flowpath_guide_widget)
        self.natfeature_check.setObjectName("natfeature_check")
        self.gridLayout_4.addWidget(self.natfeature_check, 1, 0, 1, 1)
        self.flowpath_lbl2 = QtWidgets.QLabel(self.flowpath_guide_widget)
        self.flowpath_lbl2.setObjectName("flowpath_lbl2")
        self.gridLayout_4.addWidget(self.flowpath_lbl2, 0, 0, 1, 1)
        self.infrastructure_check = QtWidgets.QCheckBox(self.flowpath_guide_widget)
        self.infrastructure_check.setObjectName("infrastructure_check")
        self.gridLayout_4.addWidget(self.infrastructure_check, 2, 0, 1, 1)
        self.natfeature_combo = QtWidgets.QComboBox(self.flowpath_guide_widget)
        self.natfeature_combo.setObjectName("natfeature_combo")
        self.natfeature_combo.addItem("")
        self.gridLayout_4.addWidget(self.natfeature_combo, 1, 1, 1, 1)
        self.infrastructure_combo = QtWidgets.QComboBox(self.flowpath_guide_widget)
        self.infrastructure_combo.setObjectName("infrastructure_combo")
        self.infrastructure_combo.addItem("")
        self.gridLayout_4.addWidget(self.infrastructure_combo, 2, 1, 1, 1)
        self.verticalLayout_6.addWidget(self.flowpath_guide_widget)
        self.connectivity_lbl2 = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_lbl2.setObjectName("connectivity_lbl2")
        self.verticalLayout_6.addWidget(self.connectivity_lbl2)
        self.sewer_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.sewer_widget.setObjectName("sewer_widget")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.sewer_widget)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.sewer_check = QtWidgets.QCheckBox(self.sewer_widget)
        self.sewer_check.setEnabled(False)
        self.sewer_check.setObjectName("sewer_check")
        self.gridLayout_7.addWidget(self.sewer_check, 0, 0, 1, 1)
        self.sewer_combo = QtWidgets.QComboBox(self.sewer_widget)
        self.sewer_combo.setEnabled(False)
        self.sewer_combo.setObjectName("sewer_combo")
        self.sewer_combo.addItem("")
        self.gridLayout_7.addWidget(self.sewer_combo, 0, 1, 1, 1)
        self.verticalLayout_6.addWidget(self.sewer_widget)
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem13)
        self.connectivity_scrollArea.setWidget(self.connectivity_contents)
        self.verticalLayout_4.addWidget(self.connectivity_scrollArea)
        self.parameters.addTab(self.connectivity_tab, "")
        self.horizontalLayout_6.addWidget(self.parameters)
        self.verticalLayout.addWidget(self.module_widget)
        self.footer = QtWidgets.QWidget(Delinblocks_Dialog)
        self.footer.setMinimumSize(QtCore.QSize(0, 40))
        self.footer.setMaximumSize(QtCore.QSize(16777215, 40))
        self.footer.setObjectName("footer")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.footer)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.footer_lbl = QtWidgets.QLabel(self.footer)
        self.footer_lbl.setObjectName("footer_lbl")
        self.horizontalLayout.addWidget(self.footer_lbl)
        self.buttonBox = QtWidgets.QDialogButtonBox(self.footer)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.horizontalLayout.addWidget(self.buttonBox)
        self.help_button = QtWidgets.QPushButton(self.footer)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/Help-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.help_button.setIcon(icon2)
        self.help_button.setObjectName("help_button")
        self.horizontalLayout.addWidget(self.help_button)
        self.verticalLayout.addWidget(self.footer)

        self.retranslateUi(Delinblocks_Dialog)
        self.parameters.setCurrentIndex(0)
        self.geometryStack.setCurrentIndex(1)
        self.flowpath_combo.setCurrentIndex(1)
        self.buttonBox.accepted.connect(Delinblocks_Dialog.accept)
        self.buttonBox.rejected.connect(Delinblocks_Dialog.reject)
        self.rep_combo.currentIndexChanged['int'].connect(self.geometryStack.setCurrentIndex)
        QtCore.QMetaObject.connectSlotsByName(Delinblocks_Dialog)
        Delinblocks_Dialog.setTabOrder(self.year_combo, self.same_params)
        Delinblocks_Dialog.setTabOrder(self.same_params, self.description)
        Delinblocks_Dialog.setTabOrder(self.description, self.parameters)
        Delinblocks_Dialog.setTabOrder(self.parameters, self.inputs_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.inputs_scrollArea, self.landuse_combo)
        Delinblocks_Dialog.setTabOrder(self.landuse_combo, self.lu_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.lu_fromurbandev, self.pop_combo)
        Delinblocks_Dialog.setTabOrder(self.pop_combo, self.pop_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.pop_fromurbandev, self.elev_combo)
        Delinblocks_Dialog.setTabOrder(self.elev_combo, self.employment_combo)
        Delinblocks_Dialog.setTabOrder(self.employment_combo, self.emp_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.emp_fromurbandev, self.locality_combo)
        Delinblocks_Dialog.setTabOrder(self.locality_combo, self.soil_combo)
        Delinblocks_Dialog.setTabOrder(self.soil_combo, self.geometry_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.geometry_scrollArea, self.rep_combo)
        Delinblocks_Dialog.setTabOrder(self.rep_combo, self.resolution_spin)
        Delinblocks_Dialog.setTabOrder(self.resolution_spin, self.resolution_auto)
        Delinblocks_Dialog.setTabOrder(self.resolution_auto, self.radio_radius)
        Delinblocks_Dialog.setTabOrder(self.radio_radius, self.radio_shared)
        Delinblocks_Dialog.setTabOrder(self.radio_shared, self.radius_spin)
        Delinblocks_Dialog.setTabOrder(self.radius_spin, self.patchchar_check)
        Delinblocks_Dialog.setTabOrder(self.patchchar_check, self.geography_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.geography_scrollArea, self.geopolitical_check)
        Delinblocks_Dialog.setTabOrder(self.geopolitical_check, self.geopolitical_combo)
        Delinblocks_Dialog.setTabOrder(self.geopolitical_combo, self.geopolitical_line)
        Delinblocks_Dialog.setTabOrder(self.geopolitical_line, self.suburb_check)
        Delinblocks_Dialog.setTabOrder(self.suburb_check, self.suburb_combo)
        Delinblocks_Dialog.setTabOrder(self.suburb_combo, self.suburb_line)
        Delinblocks_Dialog.setTabOrder(self.suburb_line, self.watermgmt_check)
        Delinblocks_Dialog.setTabOrder(self.watermgmt_check, self.watermgmt_combo)
        Delinblocks_Dialog.setTabOrder(self.watermgmt_combo, self.watermgmt_line)
        Delinblocks_Dialog.setTabOrder(self.watermgmt_line, self.considergeo_check)
        Delinblocks_Dialog.setTabOrder(self.considergeo_check, self.cbdknown_radio)
        Delinblocks_Dialog.setTabOrder(self.cbdknown_radio, self.city_combo)
        Delinblocks_Dialog.setTabOrder(self.city_combo, self.cbdmanual_radio)
        Delinblocks_Dialog.setTabOrder(self.cbdmanual_radio, self.cbdlong_box)
        Delinblocks_Dialog.setTabOrder(self.cbdlong_box, self.cbdlat_box)
        Delinblocks_Dialog.setTabOrder(self.cbdlat_box, self.cbdmark_check)
        Delinblocks_Dialog.setTabOrder(self.cbdmark_check, self.connectivity_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.connectivity_scrollArea, self.flowpath_combo)
        Delinblocks_Dialog.setTabOrder(self.flowpath_combo, self.demsmooth_check)
        Delinblocks_Dialog.setTabOrder(self.demsmooth_check, self.demsmooth_spin)
        Delinblocks_Dialog.setTabOrder(self.demsmooth_spin, self.natfeature_check)
        Delinblocks_Dialog.setTabOrder(self.natfeature_check, self.natfeature_combo)
        Delinblocks_Dialog.setTabOrder(self.natfeature_combo, self.infrastructure_check)
        Delinblocks_Dialog.setTabOrder(self.infrastructure_check, self.infrastructure_combo)
        Delinblocks_Dialog.setTabOrder(self.infrastructure_combo, self.sewer_check)
        Delinblocks_Dialog.setTabOrder(self.sewer_check, self.sewer_combo)
        Delinblocks_Dialog.setTabOrder(self.sewer_combo, self.buttonBox)
        Delinblocks_Dialog.setTabOrder(self.buttonBox, self.help_button)
        Delinblocks_Dialog.setTabOrder(self.help_button, self.spatialindices_check)
        Delinblocks_Dialog.setTabOrder(self.spatialindices_check, self.patchdelin_check)
        Delinblocks_Dialog.setTabOrder(self.patchdelin_check, self.radio_vonNeu)
        Delinblocks_Dialog.setTabOrder(self.radio_vonNeu, self.radio_moore)

    def retranslateUi(self, Delinblocks_Dialog):
        _translate = QtCore.QCoreApplication.translate
        Delinblocks_Dialog.setWindowTitle(_translate("Delinblocks_Dialog", "Dialog"))
        self.title.setText(_translate("Delinblocks_Dialog", "Spatial Setup"))
        self.subtitle.setText(_translate("Delinblocks_Dialog", "Determine geometric representation, establish spatial connectivity and define how to process input data."))
        self.sidebar_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">SCENARIO TIME STEP</span></p></body></html>"))
        self.year_combo.setItemText(0, _translate("Delinblocks_Dialog", "<startyear>"))
        self.same_params.setText(_translate("Delinblocks_Dialog", "Same Parameters"))
        self.description.setHtml(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">A simplified spatial representation of the urban environment. In this module, settings are made to the geometry that is used to represent the urban information, spatial connectivity and geography.</span></p></body></html>"))
        self.descr1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Select Maps to use in Scenario</span></p></body></html>"))
        self.descr2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Select the corresponding maps for the current scenario\'s time step (in static and benchmark scenarios, there are not time steps). Note that only the maps loaded into the scenario will appear in the combo boxes.</p></body></html>"))
        self.landuse_lbl.setText(_translate("Delinblocks_Dialog", "Land Use Map:"))
        self.lu_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.pop_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.pop_lbl.setText(_translate("Delinblocks_Dialog", "Population:"))
        self.elev_lbl.setText(_translate("Delinblocks_Dialog", "Elevation:"))
        self.descr3.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Optional Spatial Data Sets</span></p></body></html>"))
        self.emp_lbl.setText(_translate("Delinblocks_Dialog", "Employment:"))
        self.emp_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.label_32.setText(_translate("Delinblocks_Dialog", "Locality Map:"))
        self.soil_lbl.setText(_translate("Delinblocks_Dialog", "Soil Map:"))
        self.label_5.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Essential Spatial Data Sets</span></p></body></html>"))
        self.parameters.setTabText(self.parameters.indexOf(self.inputs_tab), _translate("Delinblocks_Dialog", "Input Maps"))
        self.geometry_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Setup Spatial Geometry</span></p></body></html>"))
        self.geometry_lbl1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Choose whether to use a Block-based or Patch-based representation. Determine the level of discretization in the spatial representation and customize neighbourhood and other rules for the geometric representation of the input spatial data.</p></body></html>"))
        self.rep_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "Width of the square cell in the city grid in metres"))
        self.rep_lbl.setText(_translate("Delinblocks_Dialog", "Select Spatial Geometry for Simulation: "))
        self.rep_combo.setItemText(0, _translate("Delinblocks_Dialog", "Block-based Representation"))
        self.rep_combo.setItemText(1, _translate("Delinblocks_Dialog", "Patch-based Representation"))
        self.resolution_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "Width of the square cell in the city grid in metres"))
        self.resolution_lbl.setText(_translate("Delinblocks_Dialog", "Resolution of Discretization Grid:"))
        self.resolution_spin.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Width of the square cell in the city grid in metres</span></p></body></html>"))
        self.resolution_spin.setSuffix(_translate("Delinblocks_Dialog", " metres"))
        self.resolution_auto.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.resolution_auto.setText(_translate("Delinblocks_Dialog", "Auto-determine"))
        self.geometry_lbl2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Neighbourhood Rule</span></p></body></html>"))
        self.geometry_lbl3.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>The Block-based representation features two common neighbourhood types, which are widely used in various types of grid-based simulation models. The Moore neighbourhood considers all 8 cardinal directions while the Von Neumann neighbourhood considers only the North, South, East and West directions.</p></body></html>"))
        self.radio_moore.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Moore, all eight neighbours around the central block.</span></p></body></html>"))
        self.radio_moore.setText(_translate("Delinblocks_Dialog", "Moore"))
        self.radio_vonNeu.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Von Neumann, four cardinal directions on either side of the central block.</span></p></body></html>"))
        self.radio_vonNeu.setText(_translate("Delinblocks_Dialog", "Von Neumann"))
        self.geometry_lbl4.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Further Options</span></p></body></html>"))
        self.spatialindices_check.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.spatialindices_check.setText(_translate("Delinblocks_Dialog", "Calculate Spatial Indices (e.g. richness, diversity, dominance)"))
        self.patchdelin_check.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.patchdelin_check.setText(_translate("Delinblocks_Dialog", "Conduct Patch Delineation (conceptualised)"))
        self.geometry_lbl5.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Neighbourhood Rule</span></p></body></html>"))
        self.geometry_lbl6.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Two options are available: for &quot;Search Radius&quot;, the central patch searches for neighbours within a given radius of its centroid. All neighbours with centroids within the search radius will be considered as part of the neighbourhood. In &quot;Shared Edges&quot;, the central patch detects only adjacent patches that share a boundary edge with it.</p></body></html>"))
        self.radio_radius.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Moore, all eight neighbours around the central block.</span></p></body></html>"))
        self.radio_radius.setText(_translate("Delinblocks_Dialog", "Search Radius"))
        self.radio_shared.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Von Neumann, four cardinal directions on either side of the central block.</span></p></body></html>"))
        self.radio_shared.setText(_translate("Delinblocks_Dialog", "Shared Edges"))
        self.radius_lbl.setText(_translate("Delinblocks_Dialog", "Search Radius: "))
        self.radius_spin.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Width of the square cell in the city grid in metres</span></p></body></html>"))
        self.radius_spin.setSuffix(_translate("Delinblocks_Dialog", " metres"))
        self.radius_lbl2.setWhatsThis(_translate("Delinblocks_Dialog", "Width of the square cell in the city grid in metres"))
        self.radius_lbl2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-style:italic;\">(scaled to the discretization grid size)</span></p></body></html>"))
        self.geometry_lbl7.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Further Options</span></p></body></html>"))
        self.patchchar_check.setText(_translate("Delinblocks_Dialog", "Calculate Patch Characteristics (aspect ratio, centroids)"))
        self.parameters.setTabText(self.parameters.indexOf(self.geometry_tab), _translate("Delinblocks_Dialog", "Geometric Representation"))
        self.geography_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Geopolitical Boundaries</span></p></body></html>"))
        self.geography_lbl1.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>"))
        self.geography_lbl1.setText(_translate("Delinblocks_Dialog", "Customize which boundaries the simulation should consider. These will become relevant in the definition of stakeholder groups, the comparison of districts across the urban environment and other features."))
        self.geopolitical_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.geopolitical_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees"))
        self.suburb_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.suburb_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.geopolitical_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.geopolitical_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.geopolitical_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.geopolitical_check.setText(_translate("Delinblocks_Dialog", "Geopolitical (select map)"))
        self.suburb_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.suburb_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.suburb_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.suburb_check.setText(_translate("Delinblocks_Dialog", "Suburban Boundaries (select map)"))
        self.watermgmt_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.watermgmt_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.watermgmt_check.setText(_translate("Delinblocks_Dialog", "Water Management Boundaries"))
        self.watermgmt_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.watermgmt_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.watermgmt_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.geography_lbl2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Regional Context</span></p></body></html>"))
        self.considergeo_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will have the model to calculate distance from CBD (based on a selected city using its central point of reference)."))
        self.considergeo_check.setText(_translate("Delinblocks_Dialog", "Consider location of nearest Central Business District in Simulation"))
        self.city_combo.setItemText(0, _translate("Delinblocks_Dialog", "<default city of project>"))
        self.cbdlat_box.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.cbdmark_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.cbdmark_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.cbdmark_check.setText(_translate("Delinblocks_Dialog", "Mark this location on output map"))
        self.cbdlong_box.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees"))
        self.cbdoption_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>"))
        self.cbdoption_lbl.setText(_translate("Delinblocks_Dialog", "Select an option for determining CBD Location:"))
        self.cbdknown_radio.setToolTip(_translate("Delinblocks_Dialog", "Choose the nearest city if your case study is within its metropolitan region."))
        self.cbdknown_radio.setText(_translate("Delinblocks_Dialog", "Select from a list of known locations"))
        self.cbdmanual_radio.setToolTip(_translate("Delinblocks_Dialog", "Enter the coordinates of your city\'s CBD manually. Use decimal degrees."))
        self.cbdmanual_radio.setText(_translate("Delinblocks_Dialog", "Manually enter coordinates of CBD"))
        self.lat_lbl.setText(_translate("Delinblocks_Dialog", "lat."))
        self.long_lbl.setText(_translate("Delinblocks_Dialog", "long."))
        self.parameters.setTabText(self.parameters.indexOf(self.geography_tab), _translate("Delinblocks_Dialog", "Geographic Delineation"))
        self.connectivity_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Drainage Flow Paths</span></p></body></html>"))
        self.connectivity_lbl1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Flow path methods differ slightly for Block and Patch representations but are adaptations of two known methods. The D8 method simply searches for the largest elevation drop among all neighbours of the central polygon. The modified D-inf does this in a more geometrically detailed way.</p></body></html>"))
        self.flowpath_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">How many blocks to consider when determining drainage fluxes (the greater the number, the greater the computational burden).</span></p></body></html>"))
        self.flowpath_lbl.setText(_translate("Delinblocks_Dialog", "Flowpath Method:"))
        self.demsmooth_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.demsmooth_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.demsmooth_check.setText(_translate("Delinblocks_Dialog", "DEM Smoothing (select no. of smoothing passes)"))
        self.flowpath_combo.setItemText(0, _translate("Delinblocks_Dialog", "Adapted version of D-infinity (Tarboton, 1997)"))
        self.flowpath_combo.setItemText(1, _translate("Delinblocks_Dialog", "D8 (O\'Callaghan & Mark, 1984)"))
        self.demsmooth_spin.setToolTip(_translate("Delinblocks_Dialog", "Select the number of times the smoothing algorithm should be applied. A higher number will lead to a much smoother map, but can result in possible issues with finding flow paths."))
        self.natfeature_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.natfeature_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.natfeature_check.setText(_translate("Delinblocks_Dialog", "Use natural feature as a guide (select data):"))
        self.flowpath_lbl2.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">How many blocks to consider when determining drainage fluxes (the greater the number, the greater the computational burden).</span></p></body></html>"))
        self.flowpath_lbl2.setText(_translate("Delinblocks_Dialog", "Flow Path Guides:"))
        self.infrastructure_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.infrastructure_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.infrastructure_check.setText(_translate("Delinblocks_Dialog", "Use built infrastructure as a guide (select data):"))
        self.natfeature_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.infrastructure_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.connectivity_lbl2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Connectivity to Built Network Infrastructure</span></p></body></html>"))
        self.sewer_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.sewer_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.sewer_check.setText(_translate("Delinblocks_Dialog", "Sewer Network (coming soon)"))
        self.sewer_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.parameters.setTabText(self.parameters.indexOf(self.connectivity_tab), _translate("Delinblocks_Dialog", "Spatial Connectivity"))
        self.footer_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-style:italic;\">UrbanBEATS - md_delinblocks module</span></p></body></html>"))
        self.help_button.setText(_translate("Delinblocks_Dialog", "Help"))

import ubeats_rc
