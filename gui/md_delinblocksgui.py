# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'md_delinblocksgui.ui'
#
# Created by: PyQt5 UI code generator 5.6
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Delinblocks_Dialog(object):
    def setupUi(self, Delinblocks_Dialog):
        Delinblocks_Dialog.setObjectName("Delinblocks_Dialog")
        Delinblocks_Dialog.resize(780, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(Delinblocks_Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title_frame = QtWidgets.QFrame(Delinblocks_Dialog)
        self.title_frame.setMaximumSize(QtCore.QSize(16777215, 65))
        self.title_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.title_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.title_frame.setObjectName("title_frame")
        self.gridLayout = QtWidgets.QGridLayout(self.title_frame)
        self.gridLayout.setObjectName("gridLayout")
        self.module_logo = QtWidgets.QLabel(self.title_frame)
        self.module_logo.setMinimumSize(QtCore.QSize(40, 40))
        self.module_logo.setMaximumSize(QtCore.QSize(40, 40))
        self.module_logo.setText("")
        self.module_logo.setPixmap(QtGui.QPixmap(":/images/images/md_spatial.png"))
        self.module_logo.setObjectName("module_logo")
        self.gridLayout.addWidget(self.module_logo, 0, 0, 3, 1)
        self.title = QtWidgets.QLabel(self.title_frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setObjectName("title")
        self.gridLayout.addWidget(self.title, 0, 2, 1, 1)
        self.subtitle = QtWidgets.QLabel(self.title_frame)
        self.subtitle.setWordWrap(False)
        self.subtitle.setObjectName("subtitle")
        self.gridLayout.addWidget(self.subtitle, 1, 2, 1, 1)
        self.verticalLayout.addWidget(self.title_frame)
        self.title_line = QtWidgets.QFrame(Delinblocks_Dialog)
        self.title_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.title_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.title_line.setObjectName("title_line")
        self.verticalLayout.addWidget(self.title_line)
        self.module_widget = QtWidgets.QWidget(Delinblocks_Dialog)
        self.module_widget.setObjectName("module_widget")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.module_widget)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.sidebar_widget = QtWidgets.QWidget(self.module_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sidebar_widget.sizePolicy().hasHeightForWidth())
        self.sidebar_widget.setSizePolicy(sizePolicy)
        self.sidebar_widget.setMinimumSize(QtCore.QSize(0, 0))
        self.sidebar_widget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.sidebar_widget.setObjectName("sidebar_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.sidebar_widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.sidebar_title = QtWidgets.QLabel(self.sidebar_widget)
        self.sidebar_title.setObjectName("sidebar_title")
        self.verticalLayout_2.addWidget(self.sidebar_title)
        self.year_combo = QtWidgets.QComboBox(self.sidebar_widget)
        self.year_combo.setMinimumSize(QtCore.QSize(100, 0))
        self.year_combo.setObjectName("year_combo")
        self.year_combo.addItem("")
        self.verticalLayout_2.addWidget(self.year_combo)
        self.autofillButton = QtWidgets.QPushButton(self.sidebar_widget)
        self.autofillButton.setObjectName("autofillButton")
        self.verticalLayout_2.addWidget(self.autofillButton)
        self.same_params = QtWidgets.QCheckBox(self.sidebar_widget)
        self.same_params.setObjectName("same_params")
        self.verticalLayout_2.addWidget(self.same_params)
        self.sidebar_line = QtWidgets.QFrame(self.sidebar_widget)
        self.sidebar_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.sidebar_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.sidebar_line.setObjectName("sidebar_line")
        self.verticalLayout_2.addWidget(self.sidebar_line)
        self.module_img = QtWidgets.QLabel(self.sidebar_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.module_img.sizePolicy().hasHeightForWidth())
        self.module_img.setSizePolicy(sizePolicy)
        self.module_img.setMinimumSize(QtCore.QSize(140, 100))
        self.module_img.setMaximumSize(QtCore.QSize(140, 100))
        self.module_img.setText("")
        self.module_img.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_pic.png"))
        self.module_img.setObjectName("module_img")
        self.verticalLayout_2.addWidget(self.module_img)
        self.description = QtWidgets.QTextBrowser(self.sidebar_widget)
        self.description.setMinimumSize(QtCore.QSize(140, 0))
        self.description.setMaximumSize(QtCore.QSize(140, 16777215))
        self.description.setObjectName("description")
        self.verticalLayout_2.addWidget(self.description)
        self.horizontalLayout_6.addWidget(self.sidebar_widget)
        self.parameters = QtWidgets.QTabWidget(self.module_widget)
        self.parameters.setObjectName("parameters")
        self.inputs_tab = QtWidgets.QWidget()
        self.inputs_tab.setObjectName("inputs_tab")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.inputs_tab)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.inputs_scrollArea = QtWidgets.QScrollArea(self.inputs_tab)
        self.inputs_scrollArea.setWidgetResizable(True)
        self.inputs_scrollArea.setObjectName("inputs_scrollArea")
        self.inputs_contents = QtWidgets.QWidget()
        self.inputs_contents.setGeometry(QtCore.QRect(0, 0, 537, 348))
        self.inputs_contents.setObjectName("inputs_contents")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.inputs_contents)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.descr1 = QtWidgets.QLabel(self.inputs_contents)
        self.descr1.setObjectName("descr1")
        self.verticalLayout_13.addWidget(self.descr1)
        self.descr2 = QtWidgets.QLabel(self.inputs_contents)
        self.descr2.setWordWrap(True)
        self.descr2.setObjectName("descr2")
        self.verticalLayout_13.addWidget(self.descr2)
        self.datasets = QtWidgets.QWidget(self.inputs_contents)
        self.datasets.setObjectName("datasets")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.datasets)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.lu_lbl = QtWidgets.QLabel(self.datasets)
        self.lu_lbl.setObjectName("lu_lbl")
        self.gridLayout_6.addWidget(self.lu_lbl, 1, 0, 1, 1)
        self.lu_combo = QtWidgets.QComboBox(self.datasets)
        self.lu_combo.setObjectName("lu_combo")
        self.gridLayout_6.addWidget(self.lu_combo, 1, 1, 1, 1)
        self.lu_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.lu_fromurbandev.setObjectName("lu_fromurbandev")
        self.gridLayout_6.addWidget(self.lu_fromurbandev, 1, 2, 1, 1)
        self.pop_combo = QtWidgets.QComboBox(self.datasets)
        self.pop_combo.setObjectName("pop_combo")
        self.gridLayout_6.addWidget(self.pop_combo, 2, 1, 1, 1)
        self.pop_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.pop_fromurbandev.setObjectName("pop_fromurbandev")
        self.gridLayout_6.addWidget(self.pop_fromurbandev, 2, 2, 1, 1)
        self.pop_lbl = QtWidgets.QLabel(self.datasets)
        self.pop_lbl.setObjectName("pop_lbl")
        self.gridLayout_6.addWidget(self.pop_lbl, 2, 0, 1, 1)
        self.div1 = QtWidgets.QFrame(self.datasets)
        self.div1.setFrameShape(QtWidgets.QFrame.HLine)
        self.div1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div1.setObjectName("div1")
        self.gridLayout_6.addWidget(self.div1, 4, 0, 1, 1)
        self.elev_combo = QtWidgets.QComboBox(self.datasets)
        self.elev_combo.setObjectName("elev_combo")
        self.gridLayout_6.addWidget(self.elev_combo, 3, 1, 1, 1)
        self.elev_lbl = QtWidgets.QLabel(self.datasets)
        self.elev_lbl.setObjectName("elev_lbl")
        self.gridLayout_6.addWidget(self.elev_lbl, 3, 0, 1, 1)
        self.div2 = QtWidgets.QFrame(self.datasets)
        self.div2.setFrameShape(QtWidgets.QFrame.HLine)
        self.div2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div2.setObjectName("div2")
        self.gridLayout_6.addWidget(self.div2, 4, 1, 1, 1)
        self.div3 = QtWidgets.QFrame(self.datasets)
        self.div3.setFrameShape(QtWidgets.QFrame.HLine)
        self.div3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.div3.setObjectName("div3")
        self.gridLayout_6.addWidget(self.div3, 4, 2, 1, 1)
        self.loc_combo = QtWidgets.QComboBox(self.datasets)
        self.loc_combo.setObjectName("loc_combo")
        self.gridLayout_6.addWidget(self.loc_combo, 7, 1, 1, 1)
        self.emp_combo = QtWidgets.QComboBox(self.datasets)
        self.emp_combo.setObjectName("emp_combo")
        self.gridLayout_6.addWidget(self.emp_combo, 6, 1, 1, 1)
        self.optional_lbl = QtWidgets.QLabel(self.datasets)
        self.optional_lbl.setObjectName("optional_lbl")
        self.gridLayout_6.addWidget(self.optional_lbl, 5, 0, 1, 1)
        self.emp_lbl = QtWidgets.QLabel(self.datasets)
        self.emp_lbl.setObjectName("emp_lbl")
        self.gridLayout_6.addWidget(self.emp_lbl, 6, 0, 1, 1)
        self.emp_fromurbandev = QtWidgets.QCheckBox(self.datasets)
        self.emp_fromurbandev.setObjectName("emp_fromurbandev")
        self.gridLayout_6.addWidget(self.emp_fromurbandev, 6, 2, 1, 1)
        self.loc_lbl = QtWidgets.QLabel(self.datasets)
        self.loc_lbl.setObjectName("loc_lbl")
        self.gridLayout_6.addWidget(self.loc_lbl, 7, 0, 1, 1)
        self.soil_lbl = QtWidgets.QLabel(self.datasets)
        self.soil_lbl.setObjectName("soil_lbl")
        self.gridLayout_6.addWidget(self.soil_lbl, 8, 0, 1, 1)
        self.soil_combo = QtWidgets.QComboBox(self.datasets)
        self.soil_combo.setObjectName("soil_combo")
        self.gridLayout_6.addWidget(self.soil_combo, 8, 1, 1, 1)
        self.essential_lbl = QtWidgets.QLabel(self.datasets)
        self.essential_lbl.setObjectName("essential_lbl")
        self.gridLayout_6.addWidget(self.essential_lbl, 0, 0, 1, 1)
        self.verticalLayout_13.addWidget(self.datasets)
        self.verticalLayout_12.addLayout(self.verticalLayout_13)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_12.addItem(spacerItem)
        self.inputs_scrollArea.setWidget(self.inputs_contents)
        self.verticalLayout_10.addWidget(self.inputs_scrollArea)
        self.parameters.addTab(self.inputs_tab, "")
        self.geometry_tab = QtWidgets.QWidget()
        self.geometry_tab.setObjectName("geometry_tab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.geometry_tab)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.geometry_scrollArea = QtWidgets.QScrollArea(self.geometry_tab)
        self.geometry_scrollArea.setWidgetResizable(True)
        self.geometry_scrollArea.setObjectName("geometry_scrollArea")
        self.geometry_contents = QtWidgets.QWidget()
        self.geometry_contents.setGeometry(QtCore.QRect(0, 0, 537, 408))
        self.geometry_contents.setObjectName("geometry_contents")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.geometry_contents)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.geometry_title = QtWidgets.QLabel(self.geometry_contents)
        self.geometry_title.setObjectName("geometry_title")
        self.verticalLayout_14.addWidget(self.geometry_title)
        self.geometry_lbl1 = QtWidgets.QLabel(self.geometry_contents)
        self.geometry_lbl1.setWordWrap(True)
        self.geometry_lbl1.setObjectName("geometry_lbl1")
        self.verticalLayout_14.addWidget(self.geometry_lbl1)
        self.geometry_widget = QtWidgets.QWidget(self.geometry_contents)
        self.geometry_widget.setObjectName("geometry_widget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.geometry_widget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.rep_lbl = QtWidgets.QLabel(self.geometry_widget)
        self.rep_lbl.setObjectName("rep_lbl")
        self.horizontalLayout_7.addWidget(self.rep_lbl)
        self.rep_combo = QtWidgets.QComboBox(self.geometry_widget)
        self.rep_combo.setMinimumSize(QtCore.QSize(0, 0))
        self.rep_combo.setIconSize(QtCore.QSize(30, 30))
        self.rep_combo.setObjectName("rep_combo")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images/md_spatial_block.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rep_combo.addItem(icon, "")
        self.horizontalLayout_7.addWidget(self.rep_combo)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem1)
        self.verticalLayout_14.addWidget(self.geometry_widget)
        self.resolution_widget = QtWidgets.QWidget(self.geometry_contents)
        self.resolution_widget.setObjectName("resolution_widget")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.resolution_widget)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.resolution_lbl_2 = QtWidgets.QLabel(self.resolution_widget)
        self.resolution_lbl_2.setObjectName("resolution_lbl_2")
        self.horizontalLayout_11.addWidget(self.resolution_lbl_2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem2)
        self.resolution_spin = QtWidgets.QSpinBox(self.resolution_widget)
        self.resolution_spin.setMinimumSize(QtCore.QSize(100, 0))
        self.resolution_spin.setMinimum(200)
        self.resolution_spin.setMaximum(5000)
        self.resolution_spin.setSingleStep(50)
        self.resolution_spin.setProperty("value", 500)
        self.resolution_spin.setObjectName("resolution_spin")
        self.horizontalLayout_11.addWidget(self.resolution_spin)
        self.resolution_auto = QtWidgets.QCheckBox(self.resolution_widget)
        self.resolution_auto.setObjectName("resolution_auto")
        self.horizontalLayout_11.addWidget(self.resolution_auto)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem3)
        self.verticalLayout_14.addWidget(self.resolution_widget)
        self.neighbourhood_title = QtWidgets.QLabel(self.geometry_contents)
        self.neighbourhood_title.setObjectName("neighbourhood_title")
        self.verticalLayout_14.addWidget(self.neighbourhood_title)
        self.neighbourhood_lbl = QtWidgets.QLabel(self.geometry_contents)
        self.neighbourhood_lbl.setWordWrap(True)
        self.neighbourhood_lbl.setObjectName("neighbourhood_lbl")
        self.verticalLayout_14.addWidget(self.neighbourhood_lbl)
        self.blocknhd_widget = QtWidgets.QWidget(self.geometry_contents)
        self.blocknhd_widget.setObjectName("blocknhd_widget")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.blocknhd_widget)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.img_moore = QtWidgets.QLabel(self.blocknhd_widget)
        self.img_moore.setMinimumSize(QtCore.QSize(50, 50))
        self.img_moore.setMaximumSize(QtCore.QSize(50, 50))
        self.img_moore.setText("")
        self.img_moore.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_moore.png"))
        self.img_moore.setObjectName("img_moore")
        self.horizontalLayout_9.addWidget(self.img_moore)
        self.radio_moore = QtWidgets.QRadioButton(self.blocknhd_widget)
        self.radio_moore.setEnabled(True)
        self.radio_moore.setWhatsThis("")
        self.radio_moore.setCheckable(True)
        self.radio_moore.setObjectName("radio_moore")
        self.horizontalLayout_9.addWidget(self.radio_moore)
        self.img_vonNeu = QtWidgets.QLabel(self.blocknhd_widget)
        self.img_vonNeu.setMinimumSize(QtCore.QSize(50, 50))
        self.img_vonNeu.setMaximumSize(QtCore.QSize(50, 50))
        self.img_vonNeu.setText("")
        self.img_vonNeu.setPixmap(QtGui.QPixmap(":/images/images/md_spatial_vNeumann.png"))
        self.img_vonNeu.setObjectName("img_vonNeu")
        self.horizontalLayout_9.addWidget(self.img_vonNeu)
        self.radio_vonNeu = QtWidgets.QRadioButton(self.blocknhd_widget)
        self.radio_vonNeu.setWhatsThis("")
        self.radio_vonNeu.setChecked(False)
        self.radio_vonNeu.setObjectName("radio_vonNeu")
        self.horizontalLayout_9.addWidget(self.radio_vonNeu)
        self.verticalLayout_14.addWidget(self.blocknhd_widget)
        self.geooptions_lbl = QtWidgets.QLabel(self.geometry_contents)
        self.geooptions_lbl.setObjectName("geooptions_lbl")
        self.verticalLayout_14.addWidget(self.geooptions_lbl)
        self.spatialindices_check = QtWidgets.QCheckBox(self.geometry_contents)
        self.spatialindices_check.setObjectName("spatialindices_check")
        self.verticalLayout_14.addWidget(self.spatialindices_check)
        self.patchdelin_check = QtWidgets.QCheckBox(self.geometry_contents)
        self.patchdelin_check.setObjectName("patchdelin_check")
        self.verticalLayout_14.addWidget(self.patchdelin_check)
        self.verticalLayout_5.addLayout(self.verticalLayout_14)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem4)
        self.geometry_scrollArea.setWidget(self.geometry_contents)
        self.verticalLayout_3.addWidget(self.geometry_scrollArea)
        self.parameters.addTab(self.geometry_tab, "")
        self.context_tab = QtWidgets.QWidget()
        self.context_tab.setObjectName("context_tab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.context_tab)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.connectivity_scrollArea = QtWidgets.QScrollArea(self.context_tab)
        self.connectivity_scrollArea.setWidgetResizable(True)
        self.connectivity_scrollArea.setObjectName("connectivity_scrollArea")
        self.connectivity_contents = QtWidgets.QWidget()
        self.connectivity_contents.setGeometry(QtCore.QRect(0, -622, 538, 898))
        self.connectivity_contents.setObjectName("connectivity_contents")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.connectivity_contents)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.geography_title = QtWidgets.QLabel(self.connectivity_contents)
        self.geography_title.setObjectName("geography_title")
        self.verticalLayout_16.addWidget(self.geography_title)
        self.geography_lbl = QtWidgets.QLabel(self.connectivity_contents)
        self.geography_lbl.setWordWrap(True)
        self.geography_lbl.setObjectName("geography_lbl")
        self.verticalLayout_16.addWidget(self.geography_lbl)
        self.boundary_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.boundary_widget.setObjectName("boundary_widget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.boundary_widget)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.geopolitical_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.geopolitical_lbl.setObjectName("geopolitical_lbl")
        self.gridLayout_5.addWidget(self.geopolitical_lbl, 3, 1, 1, 1)
        self.suburb_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.suburb_combo.setObjectName("suburb_combo")
        self.suburb_combo.addItem("")
        self.gridLayout_5.addWidget(self.suburb_combo, 4, 2, 1, 1)
        self.suburb_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.suburb_check.setObjectName("suburb_check")
        self.gridLayout_5.addWidget(self.suburb_check, 4, 1, 1, 1)
        self.geopolitical_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.geopolitical_check.setObjectName("geopolitical_check")
        self.gridLayout_5.addWidget(self.geopolitical_check, 1, 1, 1, 1)
        self.watermgmt_check = QtWidgets.QCheckBox(self.boundary_widget)
        self.watermgmt_check.setObjectName("watermgmt_check")
        self.gridLayout_5.addWidget(self.watermgmt_check, 8, 1, 1, 1)
        self.watermgmt_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.watermgmt_combo.setObjectName("watermgmt_combo")
        self.watermgmt_combo.addItem("")
        self.gridLayout_5.addWidget(self.watermgmt_combo, 8, 2, 1, 1)
        self.watermgmt_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.watermgmt_line.setObjectName("watermgmt_line")
        self.gridLayout_5.addWidget(self.watermgmt_line, 9, 2, 1, 1)
        self.watermgmt_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.watermgmt_lbl.setObjectName("watermgmt_lbl")
        self.gridLayout_5.addWidget(self.watermgmt_lbl, 9, 1, 1, 1)
        self.geopolitical_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.geopolitical_line.setObjectName("geopolitical_line")
        self.gridLayout_5.addWidget(self.geopolitical_line, 3, 2, 1, 1)
        self.geopolitical_combo = QtWidgets.QComboBox(self.boundary_widget)
        self.geopolitical_combo.setObjectName("geopolitical_combo")
        self.geopolitical_combo.addItem("")
        self.gridLayout_5.addWidget(self.geopolitical_combo, 1, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem5, 1, 0, 1, 1)
        self.suburb_line = QtWidgets.QLineEdit(self.boundary_widget)
        self.suburb_line.setObjectName("suburb_line")
        self.gridLayout_5.addWidget(self.suburb_line, 7, 2, 1, 1)
        self.suburb_lbl = QtWidgets.QLabel(self.boundary_widget)
        self.suburb_lbl.setObjectName("suburb_lbl")
        self.gridLayout_5.addWidget(self.suburb_lbl, 7, 1, 1, 1)
        self.verticalLayout_16.addWidget(self.boundary_widget)
        self.region_lbl = QtWidgets.QLabel(self.connectivity_contents)
        self.region_lbl.setObjectName("region_lbl")
        self.verticalLayout_16.addWidget(self.region_lbl)
        self.considergeo_check = QtWidgets.QCheckBox(self.connectivity_contents)
        self.considergeo_check.setWhatsThis("")
        self.considergeo_check.setObjectName("considergeo_check")
        self.verticalLayout_16.addWidget(self.considergeo_check)
        self.region_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.region_widget.setObjectName("region_widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.region_widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.city_combo = QtWidgets.QComboBox(self.region_widget)
        self.city_combo.setObjectName("city_combo")
        self.city_combo.addItem("")
        self.gridLayout_2.addWidget(self.city_combo, 2, 2, 1, 1)
        self.cbdlat_box = QtWidgets.QLineEdit(self.region_widget)
        self.cbdlat_box.setObjectName("cbdlat_box")
        self.gridLayout_2.addWidget(self.cbdlat_box, 7, 2, 1, 1)
        self.cbdmark_check = QtWidgets.QCheckBox(self.region_widget)
        self.cbdmark_check.setObjectName("cbdmark_check")
        self.gridLayout_2.addWidget(self.cbdmark_check, 8, 2, 1, 1)
        self.cbdlong_box = QtWidgets.QLineEdit(self.region_widget)
        self.cbdlong_box.setObjectName("cbdlong_box")
        self.gridLayout_2.addWidget(self.cbdlong_box, 4, 2, 1, 1)
        self.cbdoption_lbl = QtWidgets.QLabel(self.region_widget)
        self.cbdoption_lbl.setObjectName("cbdoption_lbl")
        self.gridLayout_2.addWidget(self.cbdoption_lbl, 1, 1, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem6, 2, 0, 1, 1)
        self.cbdknown_radio = QtWidgets.QRadioButton(self.region_widget)
        self.cbdknown_radio.setObjectName("cbdknown_radio")
        self.gridLayout_2.addWidget(self.cbdknown_radio, 2, 1, 1, 1)
        self.cbdmanual_radio = QtWidgets.QRadioButton(self.region_widget)
        self.cbdmanual_radio.setObjectName("cbdmanual_radio")
        self.gridLayout_2.addWidget(self.cbdmanual_radio, 4, 1, 1, 1)
        self.cbdlat_lbl = QtWidgets.QLabel(self.region_widget)
        self.cbdlat_lbl.setObjectName("cbdlat_lbl")
        self.gridLayout_2.addWidget(self.cbdlat_lbl, 7, 3, 1, 1)
        self.cbdlong_lbl = QtWidgets.QLabel(self.region_widget)
        self.cbdlong_lbl.setObjectName("cbdlong_lbl")
        self.gridLayout_2.addWidget(self.cbdlong_lbl, 4, 3, 1, 1)
        self.verticalLayout_16.addWidget(self.region_widget)
        self.proximity_lbl = QtWidgets.QLabel(self.connectivity_contents)
        self.proximity_lbl.setObjectName("proximity_lbl")
        self.verticalLayout_16.addWidget(self.proximity_lbl)
        self.proximity_lbl2 = QtWidgets.QLabel(self.connectivity_contents)
        self.proximity_lbl2.setWordWrap(True)
        self.proximity_lbl2.setObjectName("proximity_lbl2")
        self.verticalLayout_16.addWidget(self.proximity_lbl2)
        self.proximity_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.proximity_widget.setObjectName("proximity_widget")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.proximity_widget)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.lakes_check = QtWidgets.QCheckBox(self.proximity_widget)
        self.lakes_check.setObjectName("lakes_check")
        self.gridLayout_8.addWidget(self.lakes_check, 3, 1, 1, 1)
        self.rivers_check = QtWidgets.QCheckBox(self.proximity_widget)
        self.rivers_check.setObjectName("rivers_check")
        self.gridLayout_8.addWidget(self.rivers_check, 1, 1, 1, 1)
        self.lakes_combo = QtWidgets.QComboBox(self.proximity_widget)
        self.lakes_combo.setObjectName("lakes_combo")
        self.lakes_combo.addItem("")
        self.gridLayout_8.addWidget(self.lakes_combo, 3, 2, 1, 1)
        self.rivers_combo = QtWidgets.QComboBox(self.proximity_widget)
        self.rivers_combo.setObjectName("rivers_combo")
        self.rivers_combo.addItem("")
        self.gridLayout_8.addWidget(self.rivers_combo, 1, 2, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem7, 1, 0, 1, 1)
        self.waterbody_distance_check = QtWidgets.QCheckBox(self.proximity_widget)
        self.waterbody_distance_check.setObjectName("waterbody_distance_check")
        self.gridLayout_8.addWidget(self.waterbody_distance_check, 4, 1, 1, 1)
        self.verticalLayout_16.addWidget(self.proximity_widget)
        self.connectivity_title = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_title.setObjectName("connectivity_title")
        self.verticalLayout_16.addWidget(self.connectivity_title)
        self.connectivity_lbl1 = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_lbl1.setWordWrap(True)
        self.connectivity_lbl1.setObjectName("connectivity_lbl1")
        self.verticalLayout_16.addWidget(self.connectivity_lbl1)
        self.flowpath_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.flowpath_widget.setObjectName("flowpath_widget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.flowpath_widget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.flowpath_lbl = QtWidgets.QLabel(self.flowpath_widget)
        self.flowpath_lbl.setObjectName("flowpath_lbl")
        self.gridLayout_3.addWidget(self.flowpath_lbl, 0, 0, 1, 1)
        self.demsmooth_check = QtWidgets.QCheckBox(self.flowpath_widget)
        self.demsmooth_check.setObjectName("demsmooth_check")
        self.gridLayout_3.addWidget(self.demsmooth_check, 1, 1, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem8, 0, 2, 1, 1)
        self.flowpath_combo = QtWidgets.QComboBox(self.flowpath_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.flowpath_combo.sizePolicy().hasHeightForWidth())
        self.flowpath_combo.setSizePolicy(sizePolicy)
        self.flowpath_combo.setObjectName("flowpath_combo")
        self.flowpath_combo.addItem("")
        self.flowpath_combo.addItem("")
        self.gridLayout_3.addWidget(self.flowpath_combo, 0, 1, 1, 1)
        self.demsmooth_spin = QtWidgets.QSpinBox(self.flowpath_widget)
        self.demsmooth_spin.setMinimum(1)
        self.demsmooth_spin.setMaximum(2)
        self.demsmooth_spin.setObjectName("demsmooth_spin")
        self.gridLayout_3.addWidget(self.demsmooth_spin, 1, 2, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem9, 1, 3, 1, 1)
        self.verticalLayout_16.addWidget(self.flowpath_widget)
        self.flowpath_guide_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.flowpath_guide_widget.setObjectName("flowpath_guide_widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.flowpath_guide_widget)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.natfeature_check = QtWidgets.QCheckBox(self.flowpath_guide_widget)
        self.natfeature_check.setObjectName("natfeature_check")
        self.gridLayout_4.addWidget(self.natfeature_check, 1, 0, 1, 1)
        self.flowpath_lbl2 = QtWidgets.QLabel(self.flowpath_guide_widget)
        self.flowpath_lbl2.setObjectName("flowpath_lbl2")
        self.gridLayout_4.addWidget(self.flowpath_lbl2, 0, 0, 1, 1)
        self.infrastructure_check = QtWidgets.QCheckBox(self.flowpath_guide_widget)
        self.infrastructure_check.setObjectName("infrastructure_check")
        self.gridLayout_4.addWidget(self.infrastructure_check, 2, 0, 1, 1)
        self.natfeature_combo = QtWidgets.QComboBox(self.flowpath_guide_widget)
        self.natfeature_combo.setObjectName("natfeature_combo")
        self.natfeature_combo.addItem("")
        self.gridLayout_4.addWidget(self.natfeature_combo, 1, 1, 1, 1)
        self.infrastructure_combo = QtWidgets.QComboBox(self.flowpath_guide_widget)
        self.infrastructure_combo.setObjectName("infrastructure_combo")
        self.infrastructure_combo.addItem("")
        self.gridLayout_4.addWidget(self.infrastructure_combo, 2, 1, 1, 1)
        self.verticalLayout_16.addWidget(self.flowpath_guide_widget)
        self.connectivity_lbl2 = QtWidgets.QLabel(self.connectivity_contents)
        self.connectivity_lbl2.setObjectName("connectivity_lbl2")
        self.verticalLayout_16.addWidget(self.connectivity_lbl2)
        self.infrastructure_widget = QtWidgets.QWidget(self.connectivity_contents)
        self.infrastructure_widget.setObjectName("infrastructure_widget")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.infrastructure_widget)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.sewer_combo = QtWidgets.QComboBox(self.infrastructure_widget)
        self.sewer_combo.setEnabled(False)
        self.sewer_combo.setObjectName("sewer_combo")
        self.sewer_combo.addItem("")
        self.gridLayout_7.addWidget(self.sewer_combo, 0, 1, 1, 1)
        self.sewer_check = QtWidgets.QCheckBox(self.infrastructure_widget)
        self.sewer_check.setEnabled(False)
        self.sewer_check.setObjectName("sewer_check")
        self.gridLayout_7.addWidget(self.sewer_check, 0, 0, 1, 1)
        self.supply_check = QtWidgets.QCheckBox(self.infrastructure_widget)
        self.supply_check.setEnabled(False)
        self.supply_check.setObjectName("supply_check")
        self.gridLayout_7.addWidget(self.supply_check, 1, 0, 1, 1)
        self.supply_combo = QtWidgets.QComboBox(self.infrastructure_widget)
        self.supply_combo.setEnabled(False)
        self.supply_combo.setObjectName("supply_combo")
        self.supply_combo.addItem("")
        self.gridLayout_7.addWidget(self.supply_combo, 1, 1, 1, 1)
        self.verticalLayout_16.addWidget(self.infrastructure_widget)
        self.verticalLayout_6.addLayout(self.verticalLayout_16)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem10)
        self.connectivity_scrollArea.setWidget(self.connectivity_contents)
        self.verticalLayout_4.addWidget(self.connectivity_scrollArea)
        self.parameters.addTab(self.context_tab, "")
        self.horizontalLayout_6.addWidget(self.parameters)
        self.verticalLayout.addWidget(self.module_widget)
        self.footer = QtWidgets.QWidget(Delinblocks_Dialog)
        self.footer.setMinimumSize(QtCore.QSize(0, 40))
        self.footer.setMaximumSize(QtCore.QSize(16777215, 40))
        self.footer.setObjectName("footer")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.footer)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.footer_lbl = QtWidgets.QLabel(self.footer)
        self.footer_lbl.setObjectName("footer_lbl")
        self.horizontalLayout.addWidget(self.footer_lbl)
        self.buttonBox = QtWidgets.QDialogButtonBox(self.footer)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.horizontalLayout.addWidget(self.buttonBox)
        self.help_button = QtWidgets.QPushButton(self.footer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/Help-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.help_button.setIcon(icon1)
        self.help_button.setObjectName("help_button")
        self.horizontalLayout.addWidget(self.help_button)
        self.verticalLayout.addWidget(self.footer)

        self.retranslateUi(Delinblocks_Dialog)
        self.parameters.setCurrentIndex(1)
        self.flowpath_combo.setCurrentIndex(1)
        self.buttonBox.accepted.connect(Delinblocks_Dialog.accept)
        self.buttonBox.rejected.connect(Delinblocks_Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Delinblocks_Dialog)
        Delinblocks_Dialog.setTabOrder(self.year_combo, self.same_params)
        Delinblocks_Dialog.setTabOrder(self.same_params, self.description)
        Delinblocks_Dialog.setTabOrder(self.description, self.parameters)
        Delinblocks_Dialog.setTabOrder(self.parameters, self.inputs_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.inputs_scrollArea, self.lu_combo)
        Delinblocks_Dialog.setTabOrder(self.lu_combo, self.lu_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.lu_fromurbandev, self.pop_combo)
        Delinblocks_Dialog.setTabOrder(self.pop_combo, self.pop_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.pop_fromurbandev, self.elev_combo)
        Delinblocks_Dialog.setTabOrder(self.elev_combo, self.emp_combo)
        Delinblocks_Dialog.setTabOrder(self.emp_combo, self.emp_fromurbandev)
        Delinblocks_Dialog.setTabOrder(self.emp_fromurbandev, self.loc_combo)
        Delinblocks_Dialog.setTabOrder(self.loc_combo, self.soil_combo)
        Delinblocks_Dialog.setTabOrder(self.soil_combo, self.geometry_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.geometry_scrollArea, self.rep_combo)
        Delinblocks_Dialog.setTabOrder(self.rep_combo, self.connectivity_scrollArea)
        Delinblocks_Dialog.setTabOrder(self.connectivity_scrollArea, self.flowpath_combo)
        Delinblocks_Dialog.setTabOrder(self.flowpath_combo, self.demsmooth_check)
        Delinblocks_Dialog.setTabOrder(self.demsmooth_check, self.demsmooth_spin)
        Delinblocks_Dialog.setTabOrder(self.demsmooth_spin, self.natfeature_check)
        Delinblocks_Dialog.setTabOrder(self.natfeature_check, self.natfeature_combo)
        Delinblocks_Dialog.setTabOrder(self.natfeature_combo, self.infrastructure_check)
        Delinblocks_Dialog.setTabOrder(self.infrastructure_check, self.infrastructure_combo)
        Delinblocks_Dialog.setTabOrder(self.infrastructure_combo, self.sewer_check)
        Delinblocks_Dialog.setTabOrder(self.sewer_check, self.sewer_combo)
        Delinblocks_Dialog.setTabOrder(self.sewer_combo, self.buttonBox)
        Delinblocks_Dialog.setTabOrder(self.buttonBox, self.help_button)

    def retranslateUi(self, Delinblocks_Dialog):
        _translate = QtCore.QCoreApplication.translate
        Delinblocks_Dialog.setWindowTitle(_translate("Delinblocks_Dialog", "Dialog"))
        self.title.setText(_translate("Delinblocks_Dialog", "Spatial Setup"))
        self.subtitle.setText(_translate("Delinblocks_Dialog", "Determine geometric representation, establish spatial connectivity and define how to process input data."))
        self.sidebar_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">SCENARIO TIME STEP</span></p></body></html>"))
        self.year_combo.setItemText(0, _translate("Delinblocks_Dialog", "<startyear>"))
        self.autofillButton.setText(_translate("Delinblocks_Dialog", "Autofill from previous"))
        self.same_params.setText(_translate("Delinblocks_Dialog", "Same Parameters"))
        self.description.setHtml(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">A simplified spatial representation of the urban environment. In this module, settings are made to the geometry that is used to represent the urban information, spatial connectivity and geography.</span></p></body></html>"))
        self.descr1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Select Maps to use in Scenario</span></p></body></html>"))
        self.descr2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Select the corresponding maps for the current scenario\'s time step (in static and benchmark scenarios, there are no time steps).</p></body></html>"))
        self.lu_lbl.setText(_translate("Delinblocks_Dialog", "Land Use Map:"))
        self.lu_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.pop_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.pop_lbl.setText(_translate("Delinblocks_Dialog", "Population:"))
        self.elev_lbl.setText(_translate("Delinblocks_Dialog", "Elevation:"))
        self.optional_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Optional Spatial Data Sets</span></p></body></html>"))
        self.emp_lbl.setText(_translate("Delinblocks_Dialog", "Employment:"))
        self.emp_fromurbandev.setText(_translate("Delinblocks_Dialog", "from urban development"))
        self.loc_lbl.setText(_translate("Delinblocks_Dialog", "Locality Map:"))
        self.soil_lbl.setText(_translate("Delinblocks_Dialog", "Soil Map:"))
        self.essential_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">Essential Spatial Data Sets</span></p></body></html>"))
        self.parameters.setTabText(self.parameters.indexOf(self.inputs_tab), _translate("Delinblocks_Dialog", "Input Maps"))
        self.geometry_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Setup Spatial Geometry</span></p></body></html>"))
        self.geometry_lbl1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Setup rules for delineation of the raw data into UrbanBEATS\' vector files.</p></body></html>"))
        self.rep_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "Width of the square cell in the city grid in metres"))
        self.rep_lbl.setText(_translate("Delinblocks_Dialog", "Spatial Geometry for Simulation: "))
        self.rep_combo.setItemText(0, _translate("Delinblocks_Dialog", "Block-based Representation"))
        self.resolution_lbl_2.setWhatsThis(_translate("Delinblocks_Dialog", "Width of the square cell in the city grid in metres"))
        self.resolution_lbl_2.setText(_translate("Delinblocks_Dialog", "Resolution of Block Grid:"))
        self.resolution_spin.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Width of the square cell in the city grid in metres</span></p></body></html>"))
        self.resolution_spin.setSuffix(_translate("Delinblocks_Dialog", " metres"))
        self.resolution_auto.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.resolution_auto.setText(_translate("Delinblocks_Dialog", "Auto-determine"))
        self.neighbourhood_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Block Neighbourhood Rule</span></p></body></html>"))
        self.neighbourhood_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Choose from two common neighbourhood types, Moore (i.e. 8 cardinal directions) or Von Neumann (i.e. North, South, East and West directions).</p></body></html>"))
        self.radio_moore.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Moore, all eight neighbours around the central block.</span></p></body></html>"))
        self.radio_moore.setText(_translate("Delinblocks_Dialog", "Moore"))
        self.radio_vonNeu.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Von Neumann, four cardinal directions on either side of the central block.</span></p></body></html>"))
        self.radio_vonNeu.setText(_translate("Delinblocks_Dialog", "Von Neumann"))
        self.geooptions_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Further Options</span></p></body></html>"))
        self.spatialindices_check.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.spatialindices_check.setText(_translate("Delinblocks_Dialog", "Calculate Spatial Indices (e.g. richness, diversity, dominance)"))
        self.patchdelin_check.setToolTip(_translate("Delinblocks_Dialog", "An automatic algorithm that determines a suitable block size based on the map for computational efficiency."))
        self.patchdelin_check.setText(_translate("Delinblocks_Dialog", "Delineate Patches (conceptualised)"))
        self.parameters.setTabText(self.parameters.indexOf(self.geometry_tab), _translate("Delinblocks_Dialog", "Geometric Representation"))
        self.geography_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Geopolitical Boundaries</span></p></body></html>"))
        self.geography_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>"))
        self.geography_lbl.setText(_translate("Delinblocks_Dialog", "Customize which boundaries the simulation should consider relevant in the definition of stakeholder groups and the comparison of districts across the map."))
        self.geopolitical_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.suburb_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.suburb_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.suburb_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.suburb_check.setText(_translate("Delinblocks_Dialog", "Suburban Boundaries"))
        self.geopolitical_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.geopolitical_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.geopolitical_check.setText(_translate("Delinblocks_Dialog", "Geopolitical Boundaries"))
        self.watermgmt_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.watermgmt_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.watermgmt_check.setText(_translate("Delinblocks_Dialog", "Water Management Boundaries"))
        self.watermgmt_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.watermgmt_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.watermgmt_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.geopolitical_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees"))
        self.geopolitical_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.suburb_line.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.suburb_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p align=\"right\">Map Attribute Label Name:</p></body></html>"))
        self.region_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Regional Context</span></p></body></html>"))
        self.considergeo_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will have the model to calculate distance from CBD (based on a selected city using its central point of reference)."))
        self.considergeo_check.setText(_translate("Delinblocks_Dialog", "Consider location of nearest Central Business District in Simulation"))
        self.city_combo.setItemText(0, _translate("Delinblocks_Dialog", "<default city of project>"))
        self.cbdlat_box.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees."))
        self.cbdmark_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.cbdmark_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.cbdmark_check.setText(_translate("Delinblocks_Dialog", "Mark this location on output map"))
        self.cbdlong_box.setToolTip(_translate("Delinblocks_Dialog", "Units of decimal degrees"))
        self.cbdoption_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>"))
        self.cbdoption_lbl.setText(_translate("Delinblocks_Dialog", "Select an option for determining CBD Location:"))
        self.cbdknown_radio.setToolTip(_translate("Delinblocks_Dialog", "Choose the nearest city if your case study is within its metropolitan region."))
        self.cbdknown_radio.setText(_translate("Delinblocks_Dialog", "Select from a list of known locations"))
        self.cbdmanual_radio.setToolTip(_translate("Delinblocks_Dialog", "Enter the coordinates of your city\'s CBD manually. Use decimal degrees."))
        self.cbdmanual_radio.setText(_translate("Delinblocks_Dialog", "Manually enter coordinates of CBD"))
        self.cbdlat_lbl.setText(_translate("Delinblocks_Dialog", "lat."))
        self.cbdlong_lbl.setText(_translate("Delinblocks_Dialog", "long."))
        self.proximity_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Proximity to Water Features</span></p></body></html>"))
        self.proximity_lbl2.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p></body></html>"))
        self.proximity_lbl2.setText(_translate("Delinblocks_Dialog", "Customise whether UrbanBEATS should  load and link major surface water features with the Blocks map."))
        self.lakes_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.lakes_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.lakes_check.setText(_translate("Delinblocks_Dialog", "Ponds and Lakes"))
        self.rivers_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.rivers_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.rivers_check.setText(_translate("Delinblocks_Dialog", "Rivers and Creeks"))
        self.lakes_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.rivers_combo.setItemText(0, _translate("Delinblocks_Dialog", "<no map selected>"))
        self.waterbody_distance_check.setToolTip(_translate("Delinblocks_Dialog", "Checking this box will produce a CBD point on the \"block centres\" output map."))
        self.waterbody_distance_check.setWhatsThis(_translate("Delinblocks_Dialog", "Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.\n"
"\n"
"Correction proceeds as follows:\n"
"- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.\n"
"- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet."))
        self.waterbody_distance_check.setText(_translate("Delinblocks_Dialog", "Calculate distance to closest water body"))
        self.connectivity_title.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Spatial Connectivity - Drainage Flow Paths</span></p></body></html>"))
        self.connectivity_lbl1.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p>Select and customise methodology for identifying water drainage paths across Blocks.</p></body></html>"))
        self.flowpath_lbl.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">How many blocks to consider when determining drainage fluxes (the greater the number, the greater the computational burden).</span></p></body></html>"))
        self.flowpath_lbl.setText(_translate("Delinblocks_Dialog", "Flowpath Method:"))
        self.demsmooth_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.demsmooth_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.demsmooth_check.setText(_translate("Delinblocks_Dialog", "DEM Smoothing (select no. of smoothing passes)"))
        self.flowpath_combo.setItemText(0, _translate("Delinblocks_Dialog", "Adapted version of D-infinity (Tarboton, 1997)"))
        self.flowpath_combo.setItemText(1, _translate("Delinblocks_Dialog", "D8 (O\'Callaghan & Mark, 1984)"))
        self.demsmooth_spin.setToolTip(_translate("Delinblocks_Dialog", "Select the number of times the smoothing algorithm should be applied. A higher number will lead to a much smoother map, but can result in possible issues with finding flow paths."))
        self.natfeature_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.natfeature_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.natfeature_check.setText(_translate("Delinblocks_Dialog", "Use natural feature as a guide (select data):"))
        self.flowpath_lbl2.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">How many blocks to consider when determining drainage fluxes (the greater the number, the greater the computational burden).</span></p></body></html>"))
        self.flowpath_lbl2.setText(_translate("Delinblocks_Dialog", "Flow Path Guides:"))
        self.infrastructure_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.infrastructure_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.infrastructure_check.setText(_translate("Delinblocks_Dialog", "Use built infrastructure as a guide (select data):"))
        self.natfeature_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.infrastructure_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.connectivity_lbl2.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Spatial Connectivity - Built Network Infrastructure</span></p></body></html>"))
        self.sewer_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.sewer_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.sewer_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.sewer_check.setText(_translate("Delinblocks_Dialog", "Sewer Network (coming soon)"))
        self.supply_check.setToolTip(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Check if you want to avoid localised ponds forming in the region. If this is of particular interest because the DEM\'s accuracy has been assured and the purpose of the simulation is to assess these problem spots, then leave this box unchecked.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Correction proceeds as follows:</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If cell cannot transfer water downhill, but there is an adjacent cell with identical elevation within tolerance limit, it will transfer the water into this.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">- If tolerance limit is not met, cell\'s water is routed directly to catchment outlet.</span></p></body></html>"))
        self.supply_check.setWhatsThis(_translate("Delinblocks_Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Applies a weighted average smoothing filter over the DEM layer. </span></p></body></html>"))
        self.supply_check.setText(_translate("Delinblocks_Dialog", "Water Supply Network (coming soon)"))
        self.supply_combo.setItemText(0, _translate("Delinblocks_Dialog", "<none>"))
        self.parameters.setTabText(self.parameters.indexOf(self.context_tab), _translate("Delinblocks_Dialog", "Spatial Context"))
        self.footer_lbl.setText(_translate("Delinblocks_Dialog", "<html><head/><body><p><span style=\" font-style:italic;\">UrbanBEATS - md_delinblocks module</span></p></body></html>"))
        self.help_button.setText(_translate("Delinblocks_Dialog", "Help"))

import ubeats_rc
